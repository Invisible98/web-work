{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Minecraft Bot Manager\n\n## Overview\n\nA full-stack web application for managing multiple Minecraft bots with real-time control, AI-powered chat commands, and a responsive dashboard. The application enables spawning, controlling, and monitoring Minecraft bots that connect to a server, with features like player following, attacking, anti-AFK modes, and OpenAI GPT-5 integration for natural language command parsing.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React with TypeScript, built with Vite for fast development and optimized production builds.\n\n**UI Components**: Leverages shadcn/ui component library built on Radix UI primitives, providing accessible and customizable components. The design follows a dark theme with Minecraft-inspired aesthetics using a custom \"pixel\" font (Press Start 2P) and glassmorphic card styles.\n\n**Styling**: TailwindCSS with custom CSS variables for theming. Uses a color scheme optimized for dark mode with primary green, destructive red, and accent yellow colors reminiscent of Minecraft.\n\n**State Management**: \n- TanStack Query (React Query) for server state management with custom query client configuration\n- Local React state for UI interactions\n- WebSocket integration for real-time updates\n\n**Routing**: Wouter for lightweight client-side routing with protected routes requiring authentication.\n\n**Real-time Communication**: Custom WebSocket hook (`use-websocket`) that automatically reconnects and provides typed message handling for bot updates, logs, and server statistics.\n\n**Responsive Design**: Mobile-first approach with custom `use-mobile` hook detecting viewport size. Tab-based navigation for mobile devices.\n\n### Backend Architecture\n\n**Framework**: Express.js with TypeScript running on Node.js.\n\n**Architecture Pattern**: Service-oriented architecture with clear separation of concerns:\n- `BotManager` service: Handles all Minecraft bot lifecycle operations using the Mineflayer library\n- `OpenAIService`: Manages AI command parsing and response generation\n- `WebSocketManager`: Manages real-time bidirectional communication with clients\n\n**API Design**: RESTful endpoints under `/api` namespace with consistent error handling and response formatting.\n\n**Authentication**: \n- Passport.js with Local Strategy for username/password authentication\n- Session-based authentication using express-session\n- Password hashing using Node.js native scrypt with salt\n- Role-based access control (admin/user roles)\n\n**Real-time Events**: EventEmitter pattern for internal service communication (bot-created, bot-connected, bot-disconnected, log-added events).\n\n**Bot Management**: \n- Mineflayer library for Minecraft protocol implementation\n- Pathfinder plugin for navigation and movement\n- Auto-reconnection logic with configurable delays\n- Support for multiple simultaneous bot instances\n\n### Data Storage\n\n**ORM**: Drizzle ORM with PostgreSQL dialect for type-safe database operations and migrations.\n\n**Database**: Configured for PostgreSQL (Neon serverless), with connection pooling via `@neondatabase/serverless`.\n\n**Schema Design**:\n- `users`: User accounts with roles (admin/user)\n- `server_config`: Global server connection settings (IP, port, password, follow target)\n- `minecraft_bots`: Bot instances with status, health, position, action, and uptime tracking\n- `bot_logs`: Timestamped log entries with severity levels\n- `chat_messages`: Chat history with bot/player identification\n- `ai_config`: OpenAI integration settings (model, target user, auto-response)\n\n**Session Storage**: PostgreSQL-backed session store using `connect-pg-simple` for production, with in-memory fallback for development.\n\n**Fallback Strategy**: Comprehensive in-memory storage implementation (`MemStorage`) that mirrors the database interface, allowing the application to run without database connectivity.\n\n### External Dependencies\n\n**Minecraft Integration**:\n- `mineflayer`: Core library for creating Minecraft bots\n- `mineflayer-pathfinder`: Navigation and pathfinding capabilities\n- Target server: tbcraft.cbu.net:25569 (configurable)\n- Auto-registration and authentication with predefined credentials\n\n**AI Integration**:\n- OpenAI API (GPT-5 model) for natural language command parsing\n- Listens for specific player messages (default: rabbit0009)\n- Parses commands: attack, follow, stop, teleport, status\n- Generates contextual responses for chat interaction\n\n**Build & Development**:\n- Vite for frontend bundling and HMR\n- esbuild for backend bundling in production\n- TypeScript compilation with strict mode\n- Custom Vite plugins for Replit integration (runtime error overlay, cartographer, dev banner)\n\n**WebSocket**: `ws` library for WebSocket server implementation with custom message type system.\n\n**Session Management**: Express-session with PostgreSQL store for persistent sessions across server restarts.\n\n**UI Libraries**: Extensive use of Radix UI primitives wrapped in custom components for consistent design system.\n\n**Date Handling**: date-fns for date formatting and manipulation.\n\n**Form Validation**: React Hook Form with Zod resolvers for type-safe form validation using Drizzle-generated Zod schemas.","size_bytes":5263},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        pixel: [\"var(--font-pixel)\"],\n      },\n      borderWidth: {\n        '3': '3px',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2854},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nasync function initializeAdminUser() {\n  const existingAdmin = await storage.getUserByUsername(\"rabbit\");\n  if (!existingAdmin) {\n    const hashedPassword = await hashPassword(\"rabbit987\");\n    await storage.createUser({\n      username: \"rabbit\",\n      password: hashedPassword,\n      role: \"admin\",\n    });\n  }\n}\n\nexport function setupAuth(app: Express) {\n  initializeAdminUser();\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore as any,\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    if (req.body.username === \"rabbit\") {\n      return res.status(400).send(\"This username is reserved\");\n    }\n\n    const existingUser = await storage.getUserByUsername(req.body.username);\n    if (existingUser) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(user);\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":3160},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n});\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2440},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { setupAuth } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { BotManager } from \"./services/bot-manager\";\nimport { OpenAIService } from \"./services/openai-service\";\nimport { WebSocketManager } from \"./websocket\";\nimport { botActionSchema, insertServerConfigSchema, insertAiConfigSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication routes\n  setupAuth(app);\n\n  const httpServer = createServer(app);\n  \n  // Initialize services\n  const botManager = new BotManager();\n  const openaiService = new OpenAIService();\n  const wsManager = new WebSocketManager(httpServer);\n\n  // Setup bot manager event listeners\n  botManager.on('bot-created', async (bot) => {\n    const allBots = await botManager.getAllBots();\n    wsManager.broadcastBotUpdate(allBots);\n  });\n\n  botManager.on('bot-connected', async (botId) => {\n    const allBots = await botManager.getAllBots();\n    wsManager.broadcastBotUpdate(allBots);\n    \n    const stats = await botManager.getServerStats();\n    wsManager.broadcastServerStats(stats);\n  });\n\n  botManager.on('bot-disconnected', async (botId) => {\n    const allBots = await botManager.getAllBots();\n    wsManager.broadcastBotUpdate(allBots);\n    \n    const stats = await botManager.getServerStats();\n    wsManager.broadcastServerStats(stats);\n  });\n\n  botManager.on('bot-deleted', async (botId) => {\n    const allBots = await botManager.getAllBots();\n    wsManager.broadcastBotUpdate(allBots);\n  });\n\n  botManager.on('log-added', (log) => {\n    wsManager.broadcastLogUpdate(log);\n  });\n\n  botManager.on('chat-message', async ({ username, message, botId }) => {\n    // Check if this is a command from the AI listen user\n    const aiAction = await openaiService.parseCommand(username, message);\n    \n    if (aiAction) {\n      if (aiAction.action === 'chat') {\n        // This is a chat response, send it back\n        const responseMessage = aiAction.customCommand;\n        if (responseMessage) {\n          // Find an online bot to send the response\n          const bots = await botManager.getAllBots();\n          const onlineBot = bots.find(bot => bot.status === 'online');\n          \n          if (onlineBot) {\n            await botManager.executeAction({\n              action: 'chat',\n              customCommand: responseMessage,\n              botIds: [onlineBot.id],\n            });\n          }\n        }\n      } else {\n        // Execute the bot action\n        await botManager.executeAction(aiAction);\n        \n        // Generate and send a response if auto-response is enabled\n        const aiConfig = await storage.getAiConfig();\n        if (aiConfig.autoResponse) {\n          const response = await openaiService.generateResponse(aiAction.action, aiAction.target);\n          if (response) {\n            const bots = await botManager.getAllBots();\n            const onlineBot = bots.find(bot => bot.status === 'online');\n            \n            if (onlineBot) {\n              await botManager.executeAction({\n                action: 'chat',\n                customCommand: response,\n                botIds: [onlineBot.id],\n              });\n            }\n          }\n        }\n      }\n    }\n\n    wsManager.broadcastChatMessage({ username, message, botId, timestamp: new Date() });\n  });\n\n  // Bot management routes\n  app.get(\"/api/bots\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const bots = await botManager.getAllBots();\n      res.json(bots);\n    } catch (error: any) {\n      res.status(500).json({ message: error?.message || 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/bots\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    if (req.user?.role !== 'admin') return res.sendStatus(403);\n    \n    try {\n      const { name } = req.body;\n      const bot = await botManager.spawnBot(name);\n      res.status(201).json(bot);\n    } catch (error: any) {\n      res.status(400).json({ message: error?.message || 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/bots/spawn-multiple\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    if (req.user?.role !== 'admin') return res.sendStatus(403);\n    \n    try {\n      const { count = 10 } = req.body;\n      const bots = await botManager.spawnMultipleBots(count);\n      res.json(bots);\n    } catch (error: any) {\n      res.status(500).json({ message: error?.message || 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/bots/:id/connect\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    if (req.user?.role !== 'admin') return res.sendStatus(403);\n    \n    try {\n      await botManager.connectBot(req.params.id);\n      res.sendStatus(200);\n    } catch (error: any) {\n      res.status(500).json({ message: error?.message || 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/bots/:id/disconnect\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    if (req.user?.role !== 'admin') return res.sendStatus(403);\n    \n    try {\n      await botManager.disconnectBot(req.params.id);\n      res.sendStatus(200);\n    } catch (error: any) {\n      res.status(500).json({ message: error?.message || 'Unknown error' });\n    }\n  });\n\n  app.delete(\"/api/bots/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    if (req.user?.role !== 'admin') return res.sendStatus(403);\n    \n    try {\n      await botManager.deleteBot(req.params.id);\n      res.sendStatus(200);\n    } catch (error: any) {\n      res.status(500).json({ message: error?.message || 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/bots/connect-all\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    if (req.user?.role !== 'admin') return res.sendStatus(403);\n    \n    try {\n      await botManager.connectAllBots();\n      res.sendStatus(200);\n    } catch (error: any) {\n      res.status(500).json({ message: error?.message || 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/bots/disconnect-all\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    if (req.user?.role !== 'admin') return res.sendStatus(403);\n    \n    try {\n      await botManager.disconnectAllBots();\n      res.sendStatus(200);\n    } catch (error: any) {\n      res.status(500).json({ message: error?.message || 'Unknown error' });\n    }\n  });\n\n  // Bot actions\n  app.post(\"/api/bots/action\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    if (req.user?.role !== 'admin') return res.sendStatus(403);\n    \n    try {\n      const action = botActionSchema.parse(req.body);\n      await botManager.executeAction(action);\n      res.sendStatus(200);\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid action format\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: error?.message || 'Unknown error' });\n      }\n    }\n  });\n\n  // Server configuration\n  app.get(\"/api/server-config\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    if (req.user?.role !== 'admin') return res.sendStatus(403);\n    \n    try {\n      const config = await storage.getServerConfig();\n      res.json(config);\n    } catch (error: any) {\n      res.status(500).json({ message: error?.message || 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/server-config\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    if (req.user?.role !== 'admin') return res.sendStatus(403);\n    \n    try {\n      const configData = insertServerConfigSchema.parse(req.body);\n      const config = await storage.updateServerConfig(configData);\n      await botManager.updateServerConfig(config);\n      wsManager.broadcastServerConfigUpdate(config);\n      res.json(config);\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid config format\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: error?.message || 'Unknown error' });\n      }\n    }\n  });\n\n  // Server stats\n  app.get(\"/api/server-stats\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const stats = await botManager.getServerStats();\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ message: error?.message || 'Unknown error' });\n    }\n  });\n\n  // Logs\n  app.get(\"/api/logs\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 100;\n      const logs = await storage.getLogs(limit);\n      res.json(logs);\n    } catch (error: any) {\n      res.status(500).json({ message: error?.message || 'Unknown error' });\n    }\n  });\n\n  app.delete(\"/api/logs\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    if (req.user?.role !== 'admin') return res.sendStatus(403);\n    \n    try {\n      await storage.clearLogs();\n      res.sendStatus(200);\n    } catch (error: any) {\n      res.status(500).json({ message: error?.message || 'Unknown error' });\n    }\n  });\n\n  // Chat messages\n  app.get(\"/api/chat\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    \n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const messages = await storage.getChatMessages(limit);\n      res.json(messages);\n    } catch (error: any) {\n      res.status(500).json({ message: error?.message || 'Unknown error' });\n    }\n  });\n\n  // AI configuration\n  app.get(\"/api/ai-config\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    if (req.user?.role !== 'admin') return res.sendStatus(403);\n    \n    try {\n      const config = await storage.getAiConfig();\n      res.json(config);\n    } catch (error: any) {\n      res.status(500).json({ message: error?.message || 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/ai-config\", async (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    if (req.user?.role !== 'admin') return res.sendStatus(403);\n    \n    try {\n      const configData = insertAiConfigSchema.parse(req.body);\n      const config = await storage.updateAiConfig(configData);\n      wsManager.broadcastAiConfigUpdate(config);\n      res.json(config);\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid AI config format\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: error?.message || 'Unknown error' });\n      }\n    }\n  });\n\n  // Broadcast server stats periodically\n  setInterval(async () => {\n    try {\n      const stats = await botManager.getServerStats();\n      wsManager.broadcastServerStats(stats);\n    } catch (error) {\n      console.error('Error broadcasting server stats:', error);\n    }\n  }, 5000); // Every 5 seconds\n\n  return httpServer;\n}\n","size_bytes":11212},"server/storage.ts":{"content":"import { type User, type InsertUser, type ServerConfig, type InsertServerConfig, type Bot, type InsertBot, type Log, type InsertLog, type ChatMessage, type InsertChatMessage, type AiConfig, type InsertAiConfig } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport session from \"express-session\";\nimport createMemoryStore from \"memorystore\";\n\nconst MemoryStore = createMemoryStore(session);\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Server configuration\n  getServerConfig(): Promise<ServerConfig>;\n  updateServerConfig(config: InsertServerConfig): Promise<ServerConfig>;\n\n  // Bot management\n  getAllBots(): Promise<Bot[]>;\n  getBot(id: string): Promise<Bot | undefined>;\n  getBotByName(name: string): Promise<Bot | undefined>;\n  createBot(bot: InsertBot): Promise<Bot>;\n  updateBot(id: string, bot: Partial<InsertBot>): Promise<Bot>;\n  deleteBot(id: string): Promise<void>;\n\n  // Logs\n  getLogs(limit?: number): Promise<Log[]>;\n  addLog(log: InsertLog): Promise<Log>;\n  clearLogs(): Promise<void>;\n\n  // Chat messages\n  getChatMessages(limit?: number): Promise<ChatMessage[]>;\n  addChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n\n  // AI configuration\n  getAiConfig(): Promise<AiConfig>;\n  updateAiConfig(config: Partial<InsertAiConfig>): Promise<AiConfig>;\n\n  // Session store\n  sessionStore: ReturnType<typeof createMemoryStore>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private serverConfigs: Map<string, ServerConfig>;\n  private botsMap: Map<string, Bot>;\n  private botsByName: Map<string, Bot>;\n  private logsArray: Log[];\n  private chatMessagesArray: ChatMessage[];\n  private aiConfigs: Map<string, AiConfig>;\n  public sessionStore: ReturnType<typeof createMemoryStore>;\n\n  constructor() {\n    this.users = new Map();\n    this.serverConfigs = new Map();\n    this.botsMap = new Map();\n    this.botsByName = new Map();\n    this.logsArray = [];\n    this.chatMessagesArray = [];\n    this.aiConfigs = new Map();\n    \n    this.sessionStore = new MemoryStore({\n      checkPeriod: 86400000,\n    }) as any;\n\n    // Initialize default configurations\n    this.initializeDefaults();\n  }\n\n  private async initializeDefaults() {\n    // Default server config\n    const defaultServerConfig: ServerConfig = {\n      id: randomUUID(),\n      ip: \"tbcraft.cbu.net\",\n      port: 25569,\n      password: \"12345678P\",\n      followTarget: \"rabbit0009\",\n      autoReconnect: true,\n      reconnectDelay: 30,\n      updatedAt: new Date(),\n    };\n    this.serverConfigs.set(\"default\", defaultServerConfig);\n\n    // Default AI config\n    const defaultAiConfig: AiConfig = {\n      id: randomUUID(),\n      model: \"gpt-5\",\n      listenUser: \"rabbit0009\",\n      enabled: true,\n      autoResponse: true,\n      totalRequests: 0,\n      commandsParsed: 0,\n      avgResponseTime: 0,\n      successRate: 100,\n      updatedAt: new Date(),\n    };\n    this.aiConfigs.set(\"default\", defaultAiConfig);\n  }\n\n  // User management\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser,\n      role: insertUser.role || 'user',\n      id,\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Server configuration\n  async getServerConfig(): Promise<ServerConfig> {\n    return this.serverConfigs.get(\"default\")!;\n  }\n\n  async updateServerConfig(config: InsertServerConfig): Promise<ServerConfig> {\n    const existing = this.serverConfigs.get(\"default\")!;\n    const updated: ServerConfig = {\n      ...existing,\n      ...config,\n      updatedAt: new Date(),\n    };\n    this.serverConfigs.set(\"default\", updated);\n    return updated;\n  }\n\n  // Bot management\n  async getAllBots(): Promise<Bot[]> {\n    return Array.from(this.botsMap.values());\n  }\n\n  async getBot(id: string): Promise<Bot | undefined> {\n    return this.botsMap.get(id);\n  }\n\n  async getBotByName(name: string): Promise<Bot | undefined> {\n    return this.botsByName.get(name);\n  }\n\n  async createBot(insertBot: InsertBot): Promise<Bot> {\n    const id = randomUUID();\n    const bot: Bot = {\n      ...insertBot,\n      status: insertBot.status || 'offline',\n      health: insertBot.health ?? null,\n      position: insertBot.position ?? null,\n      currentAction: insertBot.currentAction ?? null,\n      uptime: insertBot.uptime ?? null,\n      id,\n      createdAt: new Date(),\n      lastSeen: new Date(),\n    };\n    this.botsMap.set(id, bot);\n    this.botsByName.set(bot.name, bot);\n    return bot;\n  }\n\n  async updateBot(id: string, updates: Partial<InsertBot>): Promise<Bot> {\n    const existing = this.botsMap.get(id);\n    if (!existing) {\n      throw new Error(`Bot with id ${id} not found`);\n    }\n\n    // Remove from name index if name is changing\n    if (updates.name && updates.name !== existing.name) {\n      this.botsByName.delete(existing.name);\n    }\n\n    const updated: Bot = {\n      ...existing,\n      ...updates,\n      lastSeen: new Date(),\n    };\n\n    this.botsMap.set(id, updated);\n    this.botsByName.set(updated.name, updated);\n    return updated;\n  }\n\n  async deleteBot(id: string): Promise<void> {\n    const bot = this.botsMap.get(id);\n    if (bot) {\n      this.botsMap.delete(id);\n      this.botsByName.delete(bot.name);\n    }\n  }\n\n  // Logs\n  async getLogs(limit: number = 100): Promise<Log[]> {\n    return this.logsArray.slice(-limit).reverse();\n  }\n\n  async addLog(insertLog: InsertLog): Promise<Log> {\n    const id = randomUUID();\n    const log: Log = {\n      ...insertLog,\n      botId: insertLog.botId ?? null,\n      id,\n      timestamp: new Date(),\n    };\n    this.logsArray.push(log);\n    \n    // Keep only last 1000 logs\n    if (this.logsArray.length > 1000) {\n      this.logsArray = this.logsArray.slice(-1000);\n    }\n    \n    return log;\n  }\n\n  async clearLogs(): Promise<void> {\n    this.logsArray = [];\n  }\n\n  // Chat messages\n  async getChatMessages(limit: number = 50): Promise<ChatMessage[]> {\n    return this.chatMessagesArray.slice(-limit).reverse();\n  }\n\n  async addChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const message: ChatMessage = {\n      ...insertMessage,\n      isBot: insertMessage.isBot || false,\n      botId: insertMessage.botId ?? null,\n      id,\n      timestamp: new Date(),\n    };\n    this.chatMessagesArray.push(message);\n    \n    // Keep only last 500 messages\n    if (this.chatMessagesArray.length > 500) {\n      this.chatMessagesArray = this.chatMessagesArray.slice(-500);\n    }\n    \n    return message;\n  }\n\n  // AI configuration\n  async getAiConfig(): Promise<AiConfig> {\n    return this.aiConfigs.get(\"default\")!;\n  }\n\n  async updateAiConfig(updates: Partial<InsertAiConfig>): Promise<AiConfig> {\n    const existing = this.aiConfigs.get(\"default\")!;\n    const updated: AiConfig = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.aiConfigs.set(\"default\", updated);\n    return updated;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":7441},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { Server } from 'http';\nimport { storage } from './storage';\n\nexport class WebSocketManager {\n  private wss: WebSocketServer;\n  private clients: Set<WebSocket> = new Set();\n\n  constructor(server: Server) {\n    this.wss = new WebSocketServer({ \n      server, \n      path: '/ws' \n    });\n\n    this.wss.on('connection', (ws: WebSocket) => {\n      this.clients.add(ws);\n      console.log('WebSocket client connected');\n\n      ws.on('close', () => {\n        this.clients.delete(ws);\n        console.log('WebSocket client disconnected');\n      });\n\n      ws.on('error', (error) => {\n        console.error('WebSocket error:', error);\n        this.clients.delete(ws);\n      });\n\n      // Send initial data\n      this.sendInitialData(ws);\n    });\n  }\n\n  private async sendInitialData(ws: WebSocket) {\n    try {\n      // Send current bots\n      const bots = await storage.getAllBots();\n      this.sendToClient(ws, {\n        type: 'bots-update',\n        data: bots\n      });\n\n      // Send recent logs\n      const logs = await storage.getLogs(50);\n      this.sendToClient(ws, {\n        type: 'logs-update',\n        data: logs\n      });\n\n      // Send recent chat messages\n      const chatMessages = await storage.getChatMessages(50);\n      this.sendToClient(ws, {\n        type: 'chat-update',\n        data: chatMessages\n      });\n\n      // Send server config\n      const serverConfig = await storage.getServerConfig();\n      this.sendToClient(ws, {\n        type: 'server-config-update',\n        data: serverConfig\n      });\n\n      // Send AI config\n      const aiConfig = await storage.getAiConfig();\n      this.sendToClient(ws, {\n        type: 'ai-config-update',\n        data: aiConfig\n      });\n\n    } catch (error) {\n      console.error('Error sending initial data:', error);\n    }\n  }\n\n  private sendToClient(ws: WebSocket, message: any) {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(message));\n    }\n  }\n\n  broadcast(message: any) {\n    const messageStr = JSON.stringify(message);\n    \n    this.clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(messageStr);\n      }\n    });\n  }\n\n  broadcastBotUpdate(bots: any[]) {\n    this.broadcast({\n      type: 'bots-update',\n      data: bots\n    });\n  }\n\n  broadcastLogUpdate(log: any) {\n    this.broadcast({\n      type: 'log-added',\n      data: log\n    });\n  }\n\n  broadcastChatMessage(message: any) {\n    this.broadcast({\n      type: 'chat-message',\n      data: message\n    });\n  }\n\n  broadcastServerStats(stats: any) {\n    this.broadcast({\n      type: 'server-stats',\n      data: stats\n    });\n  }\n\n  broadcastServerConfigUpdate(config: any) {\n    this.broadcast({\n      type: 'server-config-update',\n      data: config\n    });\n  }\n\n  broadcastAiConfigUpdate(config: any) {\n    this.broadcast({\n      type: 'ai-config-update',\n      data: config\n    });\n  }\n}\n","size_bytes":2930},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, integer, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"user\"), // \"admin\" or \"user\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const serverConfig = pgTable(\"server_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ip: text(\"ip\").notNull().default(\"tbcraft.cbu.net\"),\n  port: integer(\"port\").notNull().default(25569),\n  password: text(\"password\").notNull().default(\"12345678P\"),\n  followTarget: text(\"follow_target\").notNull().default(\"rabbit0009\"),\n  autoReconnect: boolean(\"auto_reconnect\").notNull().default(true),\n  reconnectDelay: integer(\"reconnect_delay\").notNull().default(30),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const bots = pgTable(\"minecraft_bots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  status: text(\"status\").notNull().default(\"offline\"), // \"online\", \"offline\", \"connecting\"\n  health: integer(\"health\").default(20),\n  position: jsonb(\"position\").$type<{ x: number; y: number; z: number }>(),\n  currentAction: text(\"current_action\").default(\"idle\"),\n  uptime: integer(\"uptime\").default(0), // seconds\n  isRegistered: boolean(\"is_registered\").notNull().default(false),\n  lastSeen: timestamp(\"last_seen\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const logs = pgTable(\"bot_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  level: text(\"level\").notNull(), // \"info\", \"success\", \"warning\", \"error\"\n  message: text(\"message\").notNull(),\n  botId: varchar(\"bot_id\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull(),\n  content: text(\"content\").notNull(),\n  isBot: boolean(\"is_bot\").notNull().default(false),\n  botId: varchar(\"bot_id\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const aiConfig = pgTable(\"ai_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  model: text(\"model\").notNull().default(\"gpt-5\"),\n  listenUser: text(\"listen_user\").notNull().default(\"rabbit0009\"),\n  enabled: boolean(\"enabled\").notNull().default(true),\n  autoResponse: boolean(\"auto_response\").notNull().default(true),\n  totalRequests: integer(\"total_requests\").default(0),\n  commandsParsed: integer(\"commands_parsed\").default(0),\n  avgResponseTime: integer(\"avg_response_time\").default(0), // milliseconds\n  successRate: integer(\"success_rate\").default(100), // percentage\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertServerConfigSchema = createInsertSchema(serverConfig).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertBotSchema = createInsertSchema(bots).omit({\n  id: true,\n  createdAt: true,\n  lastSeen: true,\n});\n\nexport const insertLogSchema = createInsertSchema(logs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertAiConfigSchema = createInsertSchema(aiConfig).omit({\n  id: true,\n  updatedAt: true,\n});\n\n// Bot action schemas\nexport const botActionSchema = z.object({\n  action: z.enum([\"follow\", \"attack\", \"teleport\", \"stop\", \"antiafk\", \"command\", \"chat\"]),\n  target: z.string().optional(),\n  botIds: z.array(z.string()).optional(), // if empty, applies to all\n  customCommand: z.string().optional(),\n});\n\nexport const serverStatsSchema = z.object({\n  totalBots: z.number(),\n  onlineBots: z.number(),\n  offlineBots: z.number(),\n  avgHealth: z.number(),\n  avgUptime: z.number(),\n  serverPing: z.number(),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type ServerConfig = typeof serverConfig.$inferSelect;\nexport type InsertServerConfig = z.infer<typeof insertServerConfigSchema>;\nexport type Bot = typeof bots.$inferSelect;\nexport type InsertBot = z.infer<typeof insertBotSchema>;\nexport type Log = typeof logs.$inferSelect;\nexport type InsertLog = z.infer<typeof insertLogSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type AiConfig = typeof aiConfig.$inferSelect;\nexport type InsertAiConfig = z.infer<typeof insertAiConfigSchema>;\nexport type BotAction = z.infer<typeof botActionSchema>;\nexport type ServerStats = z.infer<typeof serverStatsSchema>;\n","size_bytes":5027},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport UserDashboard from \"@/pages/user-dashboard\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/auth\" component={AuthPage} />\n      <ProtectedRoute path=\"/admin\" component={AdminDashboard} />\n      <ProtectedRoute path=\"/user\" component={UserDashboard} />\n      <ProtectedRoute path=\"/\" component={AdminDashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1169},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&family=Inter:wght@400;500;600;700&family=Roboto+Mono:wght@400;500&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 4%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(0 0% 10%);\n  --card-foreground: hsl(0 0% 98%);\n  --popover: hsl(0 0% 10%);\n  --popover-foreground: hsl(0 0% 98%);\n  --primary: hsl(142 76% 58%);\n  --primary-foreground: hsl(0 0% 0%);\n  --secondary: hsl(240 4% 46%);\n  --secondary-foreground: hsl(0 0% 98%);\n  --muted: hsl(240 4% 20%);\n  --muted-foreground: hsl(240 5% 65%);\n  --accent: hsl(43 96% 56%);\n  --accent-foreground: hsl(0 0% 0%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(240 4% 20%);\n  --input: hsl(240 4% 20%);\n  --ring: hsl(142 76% 58%);\n  --chart-1: hsl(142 76% 58%);\n  --chart-2: hsl(159 100% 36%);\n  --chart-3: hsl(43 96% 56%);\n  --chart-4: hsl(147 78% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(0 0% 10%);\n  --sidebar-foreground: hsl(0 0% 98%);\n  --sidebar-primary: hsl(142 76% 58%);\n  --sidebar-primary-foreground: hsl(0 0% 0%);\n  --sidebar-accent: hsl(240 4% 20%);\n  --sidebar-accent-foreground: hsl(142 76% 58%);\n  --sidebar-border: hsl(240 4% 20%);\n  --sidebar-ring: hsl(142 76% 58%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"Roboto Mono\", monospace;\n  --font-pixel: \"Press Start 2P\", cursive;\n  --radius: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 4%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(0 0% 10%);\n  --card-foreground: hsl(0 0% 98%);\n  --popover: hsl(0 0% 10%);\n  --popover-foreground: hsl(0 0% 98%);\n  --primary: hsl(142 76% 58%);\n  --primary-foreground: hsl(0 0% 0%);\n  --secondary: hsl(240 4% 46%);\n  --secondary-foreground: hsl(0 0% 98%);\n  --muted: hsl(240 4% 20%);\n  --muted-foreground: hsl(240 5% 65%);\n  --accent: hsl(43 96% 56%);\n  --accent-foreground: hsl(0 0% 0%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(240 4% 20%);\n  --input: hsl(240 4% 20%);\n  --ring: hsl(142 76% 58%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .font-pixel {\n    font-family: var(--font-pixel);\n  }\n}\n\n@layer components {\n  .minecraft-btn {\n    @apply relative font-pixel text-xs uppercase px-6 py-3 border-3 transition-all duration-100 ease-in-out;\n    box-shadow: 4px 4px 0 rgba(0, 0, 0, 0.5);\n    image-rendering: pixelated;\n  }\n\n  .minecraft-btn:hover:not(:disabled) {\n    transform: translate(-2px, -2px);\n    box-shadow: 6px 6px 0 rgba(0, 0, 0, 0.5);\n  }\n\n  .minecraft-btn:active:not(:disabled) {\n    transform: translate(2px, 2px);\n    box-shadow: 2px 2px 0 rgba(0, 0, 0, 0.5);\n  }\n\n  .glass-card {\n    background: rgba(26, 26, 26, 0.6);\n    backdrop-filter: blur(12px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .gradient-header {\n    background: linear-gradient(135deg, hsl(142 76% 20%) 0%, hsl(142 76% 10%) 100%);\n    border-bottom: 3px solid hsl(142 76% 58%);\n  }\n\n  .status-dot {\n    @apply w-3 h-3 rounded-full inline-block animate-pulse;\n  }\n\n  .status-online {\n    @apply bg-primary;\n    box-shadow: 0 0 12px hsl(142 76% 58%);\n  }\n\n  .status-offline {\n    @apply bg-destructive;\n    box-shadow: 0 0 12px hsl(0 84% 60%);\n  }\n\n  .status-connecting {\n    @apply bg-accent;\n    box-shadow: 0 0 12px hsl(43 96% 56%);\n  }\n\n  .log-entry {\n    @apply font-mono text-xs p-2 border-l-3;\n  }\n\n  .log-info {\n    @apply border-l-blue-500 text-blue-300;\n  }\n\n  .log-success {\n    @apply border-l-primary text-green-300;\n  }\n\n  .log-warning {\n    @apply border-l-accent text-yellow-300;\n  }\n\n  .log-error {\n    @apply border-l-destructive text-red-300;\n  }\n\n  .pixel-border {\n    @apply border-3;\n    image-rendering: pixelated;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(0 0% 10%);\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(142 76% 58%);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(142 76% 48%);\n}\n","size_bytes":4146},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/bot-manager.ts":{"content":"import { EventEmitter } from 'events';\nimport mineflayer, { Bot as MineflayerBot } from 'mineflayer';\nimport { pathfinder, Movements } from 'mineflayer-pathfinder';\nimport { storage } from '../storage';\nimport { Bot, InsertBot, BotAction, ServerConfig } from '@shared/schema';\n\ninterface BotInstance {\n  id: string;\n  bot: MineflayerBot | null;\n  reconnectTimer?: NodeJS.Timeout;\n  antiAfkTimer?: NodeJS.Timeout;\n  isConnecting: boolean;\n  uptime: Date;\n}\n\nexport class BotManager extends EventEmitter {\n  private bots: Map<string, BotInstance> = new Map();\n  private serverConfig!: ServerConfig;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  private async initialize() {\n    this.serverConfig = await storage.getServerConfig();\n    \n    // Load existing bots from storage\n    const existingBots = await storage.getAllBots();\n    for (const bot of existingBots) {\n      this.bots.set(bot.id, {\n        id: bot.id,\n        bot: null,\n        isConnecting: false,\n        uptime: new Date(),\n      });\n    }\n  }\n\n  async updateServerConfig(config: ServerConfig) {\n    this.serverConfig = config;\n    // Reconnect all bots with new config\n    await this.reconnectAllBots();\n  }\n\n  async spawnBot(customName?: string): Promise<Bot> {\n    const name = customName || `CraftBot_${Math.floor(Math.random() * 10000)}`;\n    \n    // Check if bot name already exists\n    const existing = await storage.getBotByName(name);\n    if (existing) {\n      throw new Error(`Bot with name ${name} already exists`);\n    }\n\n    const botData: InsertBot = {\n      name,\n      status: 'offline',\n      health: 20,\n      position: { x: 0, y: 0, z: 0 },\n      currentAction: 'idle',\n      uptime: 0,\n    };\n\n    const bot = await storage.createBot(botData);\n    \n    const botInstance: BotInstance = {\n      id: bot.id,\n      bot: null,\n      isConnecting: false,\n      uptime: new Date(),\n    };\n    \n    this.bots.set(bot.id, botInstance);\n    \n    this.emit('bot-created', bot);\n    await this.addLog('success', `Bot ${name} created`);\n    \n    return bot;\n  }\n\n  async spawnMultipleBots(count: number): Promise<Bot[]> {\n    const bots: Bot[] = [];\n    \n    for (let i = 0; i < count; i++) {\n      try {\n        const bot = await this.spawnBot();\n        bots.push(bot);\n      } catch (error: any) {\n        await this.addLog('error', `Failed to spawn bot ${i + 1}: ${error?.message || 'Unknown error'}`);\n      }\n    }\n    \n    return bots;\n  }\n\n  async connectBot(botId: string): Promise<void> {\n    const botInstance = this.bots.get(botId);\n    if (!botInstance) {\n      throw new Error(`Bot ${botId} not found`);\n    }\n\n    if (botInstance.isConnecting || botInstance.bot) {\n      return; // Already connecting or connected\n    }\n\n    botInstance.isConnecting = true;\n    await storage.updateBot(botId, { status: 'connecting' });\n    \n    const botData = await storage.getBot(botId);\n    if (!botData) return;\n\n    try {\n      const bot = mineflayer.createBot({\n        host: this.serverConfig.ip,\n        port: this.serverConfig.port,\n        username: botData.name,\n        auth: 'offline',\n        version: '1.21.4',\n      });\n\n      // Load pathfinder plugin\n      bot.loadPlugin(pathfinder);\n\n      botInstance.bot = bot;\n      botInstance.uptime = new Date();\n\n      this.setupBotEventHandlers(botId, bot);\n      \n      await this.addLog('info', `${botData.name} connecting to ${this.serverConfig.ip}:${this.serverConfig.port}`);\n      \n    } catch (error: any) {\n      botInstance.isConnecting = false;\n      await storage.updateBot(botId, { status: 'offline' });\n      await this.addLog('error', `Failed to connect ${botData.name}: ${error?.message || 'Unknown error'}`);\n      \n      if (this.serverConfig.autoReconnect) {\n        this.scheduleReconnect(botId);\n      }\n    }\n  }\n\n  private setupBotEventHandlers(botId: string, bot: MineflayerBot) {\n    const botInstance = this.bots.get(botId);\n    if (!botInstance) return;\n\n    bot.on('spawn', async () => {\n      botInstance.isConnecting = false;\n      const position = bot.entity?.position;\n      \n      await storage.updateBot(botId, {\n        status: 'online',\n        health: bot.health,\n        position: position ? { x: Math.floor(position.x), y: Math.floor(position.y), z: Math.floor(position.z) } : undefined,\n        currentAction: 'idle',\n      });\n\n      const botData = await storage.getBot(botId);\n      await this.addLog('success', `${botData?.name} connected and spawned`);\n      \n      // Auto login/register\n      setTimeout(async () => {\n        try {\n          if (botData?.isRegistered) {\n            bot.chat(`/login ${this.serverConfig.password}`);\n            await this.addLog('info', `${botData.name} executing /login`);\n          } else {\n            bot.chat(`/register ${this.serverConfig.password}`);\n            await this.addLog('info', `${botData.name} executing /register`);\n            await storage.updateBot(botId, { isRegistered: true });\n          }\n        } catch (error: any) {\n          await this.addLog('error', `${botData?.name} auto-login failed: ${error?.message || 'Unknown error'}`);\n        }\n      }, 1000);\n      \n      this.emit('bot-connected', botId);\n    });\n\n    bot.on('health', async () => {\n      await storage.updateBot(botId, { health: bot.health });\n    });\n\n    bot.on('move', async () => {\n      const position = bot.entity?.position;\n      if (position) {\n        await storage.updateBot(botId, {\n          position: { x: Math.floor(position.x), y: Math.floor(position.y), z: Math.floor(position.z) }\n        });\n      }\n    });\n\n    bot.on('chat', async (username, message) => {\n      try {\n        if (username === bot.username) return; // Ignore own messages\n        \n        // Store chat message\n        await storage.addChatMessage({\n          username,\n          content: message,\n          isBot: false,\n        });\n\n        this.emit('chat-message', { username, message, botId });\n      } catch (error: any) {\n        console.error('Chat event error:', error);\n      }\n    });\n\n    bot.on('error', async (err) => {\n      console.error('Bot error:', err);\n      await this.addLog('error', `${bot.username} error: ${err.message}`);\n      this.handleBotDisconnect(botId, 'error');\n    });\n\n    bot.on('end', async (reason) => {\n      await this.addLog('warning', `${bot.username} disconnected: ${reason}`);\n      this.handleBotDisconnect(botId, 'disconnected');\n    });\n\n    bot.on('kicked', async (reason) => {\n      await this.addLog('error', `${bot.username} kicked: ${reason}`);\n      this.handleBotDisconnect(botId, 'kicked');\n    });\n  }\n\n  private async handleBotDisconnect(botId: string, reason: string) {\n    const botInstance = this.bots.get(botId);\n    if (!botInstance) return;\n\n    botInstance.bot = null;\n    botInstance.isConnecting = false;\n    \n    // Clear timers\n    if (botInstance.reconnectTimer) {\n      clearTimeout(botInstance.reconnectTimer);\n    }\n    if (botInstance.antiAfkTimer) {\n      clearInterval(botInstance.antiAfkTimer);\n    }\n\n    await storage.updateBot(botId, {\n      status: 'offline',\n      currentAction: 'disconnected',\n    });\n\n    this.emit('bot-disconnected', botId);\n\n    if (this.serverConfig.autoReconnect) {\n      this.scheduleReconnect(botId);\n    }\n  }\n\n  private scheduleReconnect(botId: string) {\n    const botInstance = this.bots.get(botId);\n    if (!botInstance) return;\n\n    botInstance.reconnectTimer = setTimeout(() => {\n      this.connectBot(botId);\n    }, this.serverConfig.reconnectDelay * 1000);\n  }\n\n  async disconnectBot(botId: string): Promise<void> {\n    const botInstance = this.bots.get(botId);\n    if (!botInstance) return;\n\n    // Clear timers\n    if (botInstance.reconnectTimer) {\n      clearTimeout(botInstance.reconnectTimer);\n    }\n    if (botInstance.antiAfkTimer) {\n      clearInterval(botInstance.antiAfkTimer);\n    }\n\n    if (botInstance.bot) {\n      botInstance.bot.quit();\n      botInstance.bot = null;\n    }\n\n    await storage.updateBot(botId, {\n      status: 'offline',\n      currentAction: 'idle',\n    });\n\n    const botData = await storage.getBot(botId);\n    await this.addLog('info', `${botData?.name} disconnected`);\n  }\n\n  async deleteBot(botId: string): Promise<void> {\n    await this.disconnectBot(botId);\n    \n    const botData = await storage.getBot(botId);\n    await storage.deleteBot(botId);\n    this.bots.delete(botId);\n    \n    await this.addLog('info', `Bot ${botData?.name} deleted`);\n    this.emit('bot-deleted', botId);\n  }\n\n  async executeAction(action: BotAction): Promise<void> {\n    const targetBots = action.botIds?.length \n      ? action.botIds \n      : Array.from(this.bots.keys());\n\n    for (const botId of targetBots) {\n      await this.executeBotAction(botId, action);\n    }\n  }\n\n  private async executeBotAction(botId: string, action: BotAction): Promise<void> {\n    const botInstance = this.bots.get(botId);\n    const botData = await storage.getBot(botId);\n    \n    if (!botInstance?.bot || !botData) {\n      await this.addLog('warning', `Cannot execute action on ${botData?.name || botId}: bot not connected`);\n      return;\n    }\n\n    const bot = botInstance.bot;\n\n    try {\n      switch (action.action) {\n        case 'follow':\n          await this.followPlayer(bot, action.target || this.serverConfig.followTarget);\n          await storage.updateBot(botId, { currentAction: `Following ${action.target || this.serverConfig.followTarget}` });\n          break;\n\n        case 'attack':\n          if (action.target) {\n            await this.attackPlayer(bot, action.target);\n            await storage.updateBot(botId, { currentAction: `Attacking ${action.target}` });\n          }\n          break;\n\n        case 'teleport':\n          await this.teleportToPlayer(bot, action.target || this.serverConfig.followTarget);\n          await storage.updateBot(botId, { currentAction: 'Teleporting' });\n          break;\n\n        case 'stop':\n          await this.stopBotAction(bot);\n          await storage.updateBot(botId, { currentAction: 'idle' });\n          break;\n\n        case 'antiafk':\n          await this.enableAntiAfk(botId, bot);\n          await storage.updateBot(botId, { currentAction: 'Anti-AFK' });\n          break;\n\n        case 'command':\n          if (action.customCommand) {\n            await this.executeCommand(bot, action.customCommand);\n          }\n          break;\n\n        case 'chat':\n          if (action.customCommand) {\n            await this.sendChat(bot, action.customCommand);\n          }\n          break;\n      }\n\n      await this.addLog('success', `${botData.name}: ${action.action} executed`);\n    } catch (error: any) {\n      await this.addLog('error', `${botData.name}: Failed to execute ${action.action}: ${error?.message || 'Unknown error'}`);\n    }\n  }\n\n  private async followPlayer(bot: MineflayerBot, playerName: string): Promise<void> {\n    const player = bot.players[playerName];\n    if (!player || !player.entity) {\n      throw new Error(`Player ${playerName} not found`);\n    }\n\n    const { goals } = require('mineflayer-pathfinder');\n    const movements = new Movements(bot);\n    bot.pathfinder.setMovements(movements);\n    bot.pathfinder.setGoal(new goals.GoalFollow(player.entity, 3));\n  }\n\n  private async attackPlayer(bot: MineflayerBot, playerName: string): Promise<void> {\n    const player = bot.players[playerName];\n    if (!player || !player.entity) {\n      throw new Error(`Player ${playerName} not found`);\n    }\n\n    await bot.attack(player.entity);\n  }\n\n  private async teleportToPlayer(bot: MineflayerBot, playerName: string): Promise<void> {\n    bot.chat(`/tp ${playerName}`);\n  }\n\n  private async stopBotAction(bot: MineflayerBot): Promise<void> {\n    bot.pathfinder.setGoal(null);\n    bot.clearControlStates();\n  }\n\n  private async enableAntiAfk(botId: string, bot: MineflayerBot): Promise<void> {\n    const botInstance = this.bots.get(botId);\n    if (!botInstance) return;\n\n    // Clear existing timer\n    if (botInstance.antiAfkTimer) {\n      clearInterval(botInstance.antiAfkTimer);\n    }\n\n    // Jump every minute\n    botInstance.antiAfkTimer = setInterval(() => {\n      if (bot && bot.entity) {\n        bot.setControlState('jump', true);\n        setTimeout(() => {\n          if (bot) bot.setControlState('jump', false);\n        }, 100);\n      }\n    }, 60000);\n  }\n\n  private async executeCommand(bot: MineflayerBot, command: string): Promise<void> {\n    if (command.startsWith('/')) {\n      bot.chat(command);\n    } else {\n      // Try to execute as a direct command\n      bot.chat(`/${command}`);\n    }\n  }\n\n  private async sendChat(bot: MineflayerBot, message: string): Promise<void> {\n    bot.chat(message);\n    \n    // Store the sent message\n    await storage.addChatMessage({\n      username: bot.username,\n      content: message,\n      isBot: true,\n      botId: this.bots.get(bot.username)?.id,\n    });\n  }\n\n  async connectAllBots(): Promise<void> {\n    const allBots = await storage.getAllBots();\n    \n    for (const bot of allBots) {\n      try {\n        await this.connectBot(bot.id);\n      } catch (error: any) {\n        await this.addLog('error', `Failed to connect ${bot.name}: ${error?.message || 'Unknown error'}`);\n      }\n    }\n  }\n\n  async disconnectAllBots(): Promise<void> {\n    const botIds = Array.from(this.bots.keys());\n    \n    for (const botId of botIds) {\n      await this.disconnectBot(botId);\n    }\n  }\n\n  async reconnectAllBots(): Promise<void> {\n    await this.disconnectAllBots();\n    \n    // Wait a moment before reconnecting\n    setTimeout(() => {\n      this.connectAllBots();\n    }, 2000);\n  }\n\n  async getServerStats() {\n    const allBots = await storage.getAllBots();\n    const onlineBots = allBots.filter(bot => bot.status === 'online');\n    \n    const totalHealth = onlineBots.reduce((sum, bot) => sum + (bot.health || 0), 0);\n    const avgHealth = onlineBots.length > 0 ? totalHealth / onlineBots.length : 0;\n    \n    // Calculate average uptime in hours\n    const now = new Date();\n    const totalUptime = Array.from(this.bots.values()).reduce((sum, instance) => {\n      if (instance.bot) {\n        return sum + (now.getTime() - instance.uptime.getTime());\n      }\n      return sum;\n    }, 0);\n    const avgUptime = onlineBots.length > 0 ? totalUptime / onlineBots.length / (1000 * 60 * 60) : 0;\n\n    return {\n      totalBots: allBots.length,\n      onlineBots: onlineBots.length,\n      offlineBots: allBots.length - onlineBots.length,\n      avgHealth: Math.round(avgHealth * 10) / 10,\n      avgUptime: Math.round(avgUptime * 10) / 10,\n      serverPing: 42, // TODO: Implement actual ping measurement\n    };\n  }\n\n  private async addLog(level: 'info' | 'success' | 'warning' | 'error', message: string, botId?: string): Promise<void> {\n    await storage.addLog({ level, message, botId });\n    this.emit('log-added', { level, message, botId, timestamp: new Date() });\n  }\n\n  async getAllBots(): Promise<Bot[]> {\n    return storage.getAllBots();\n  }\n\n  async getBot(id: string): Promise<Bot | undefined> {\n    return storage.getBot(id);\n  }\n}\n","size_bytes":14976},"server/services/openai-service.ts":{"content":"import OpenAI from 'openai';\nimport { storage } from '../storage';\nimport { BotAction } from '@shared/schema';\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nexport class OpenAIService {\n  private requestStartTime: number = 0;\n\n  async parseCommand(username: string, message: string): Promise<BotAction | null> {\n    const aiConfig = await storage.getAiConfig();\n    \n    if (!aiConfig.enabled || username !== aiConfig.listenUser) {\n      return null;\n    }\n\n    this.requestStartTime = Date.now();\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are a Minecraft bot command parser. Parse the user's message and extract bot commands.\n            \nAvailable commands:\n- \"attack [player]\" - Attack a specific player\n- \"follow [player]\" - Follow a specific player (default: rabbit0009)\n- \"stop\" - Stop current action\n- \"teleport\" - Teleport to rabbit0009\n- \"status\" - Get bot status (no action needed, just respond)\n\nIf the message contains a valid command, respond with JSON in this format:\n{\n  \"action\": \"follow|attack|teleport|stop|chat\",\n  \"target\": \"player_name_if_applicable\",\n  \"customCommand\": \"text_if_chat_response\",\n  \"shouldRespond\": true/false\n}\n\nIf it's just casual conversation or status request, respond with:\n{\n  \"shouldRespond\": true,\n  \"customCommand\": \"your_friendly_response\"\n}\n\nIf no valid command is found, respond with:\n{\n  \"shouldRespond\": false\n}`\n          },\n          {\n            role: \"user\",\n            content: message\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        max_completion_tokens: 2048,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      \n      // Update AI stats\n      await this.updateAiStats(true);\n      \n      if (result.action && result.action !== 'chat') {\n        // Increment commands parsed\n        await storage.updateAiConfig({ \n          commandsParsed: (aiConfig.commandsParsed || 0) + 1 \n        });\n        \n        return {\n          action: result.action,\n          target: result.target,\n          customCommand: result.customCommand,\n        };\n      } else if (result.shouldRespond && result.customCommand) {\n        // This is a chat response, not a bot action\n        return {\n          action: 'chat',\n          customCommand: result.customCommand,\n        };\n      }\n      \n      return null;\n      \n    } catch (error) {\n      await this.updateAiStats(false);\n      console.error('OpenAI API error:', error);\n      \n      // Return a simple fallback response\n      if (message.toLowerCase().includes('status')) {\n        return {\n          action: 'chat',\n          customCommand: 'All bots are running normally!',\n        };\n      }\n      \n      return null;\n    }\n  }\n\n  async generateResponse(command: string, context?: string): Promise<string> {\n    const aiConfig = await storage.getAiConfig();\n    \n    if (!aiConfig.autoResponse) {\n      return '';\n    }\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are a helpful Minecraft bot assistant. Respond briefly and friendly to commands and interactions. \n            Keep responses short (1-2 sentences max) and in character as a Minecraft bot.\n            \n            Examples:\n            - For attack commands: \"Attacking [player] now!\"\n            - For follow commands: \"Following [player]!\"\n            - For stop commands: \"Stopping all actions.\"\n            - For teleport: \"Teleporting now!\"\n            - For general chat: Be friendly and helpful but brief.`\n          },\n          {\n            role: \"user\",\n            content: `Command executed: ${command}. ${context ? `Context: ${context}` : ''}`\n          }\n        ],\n        max_completion_tokens: 100,\n      });\n\n      return response.choices[0].message.content || '';\n      \n    } catch (error) {\n      console.error('OpenAI response generation error:', error);\n      return 'Command executed!';\n    }\n  }\n\n  private async updateAiStats(success: boolean): Promise<void> {\n    const aiConfig = await storage.getAiConfig();\n    const responseTime = Date.now() - this.requestStartTime;\n    \n    const totalRequests = aiConfig.totalRequests || 0;\n    const avgResponseTime = aiConfig.avgResponseTime || 0;\n    const successRate = aiConfig.successRate || 100;\n    \n    const newTotal = totalRequests + 1;\n    const newAvgResponse = Math.round(\n      (avgResponseTime * totalRequests + responseTime) / newTotal\n    );\n    \n    let newSuccessRate = successRate;\n    if (success) {\n      // Calculate new success rate\n      const successfulRequests = Math.round((successRate / 100) * totalRequests) + 1;\n      newSuccessRate = Math.round((successfulRequests / newTotal) * 100);\n    } else {\n      const successfulRequests = Math.round((successRate / 100) * totalRequests);\n      newSuccessRate = Math.round((successfulRequests / newTotal) * 100);\n    }\n\n    await storage.updateAiConfig({\n      totalRequests: newTotal,\n      avgResponseTime: newAvgResponse,\n      successRate: newSuccessRate,\n    });\n  }\n}\n","size_bytes":5452},"client/src/components/ai-chat.tsx":{"content":"import { useState } from \"react\";\nimport { ChatMessage, AiConfig, InsertAiConfig } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MinecraftButton } from \"@/components/ui/minecraft-button\";\nimport { Brain, Save, List, BarChart3, User, Bot } from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface AiChatProps {\n  chatMessages: ChatMessage[];\n  aiConfig: AiConfig;\n  onSaveConfig: (config: Partial<InsertAiConfig>) => void;\n  isSaving?: boolean;\n}\n\nexport function AiChat({ chatMessages, aiConfig, onSaveConfig, isSaving = false }: AiChatProps) {\n  const [formData, setFormData] = useState<Partial<InsertAiConfig>>({\n    model: aiConfig.model,\n    listenUser: aiConfig.listenUser,\n    enabled: aiConfig.enabled,\n    autoResponse: aiConfig.autoResponse,\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSaveConfig(formData);\n  };\n\n  const handleInputChange = (field: keyof InsertAiConfig, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const formatTime = (timestamp: Date | string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n  };\n\n  const supportedCommands = [\n    { command: \"attack\", description: \"[player]\" },\n    { command: \"follow\", description: \"[player]\" },\n    { command: \"stop\", description: \"\" },\n    { command: \"teleport\", description: \"\" },\n    { command: \"status\", description: \"\" },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n      {/* Chat Log */}\n      <div className=\"lg:col-span-2\">\n        <Card className=\"glass-card border-primary\" data-testid=\"ai-chat-log\">\n          <CardHeader className=\"p-4 border-b border-border\">\n            <CardTitle className=\"font-pixel text-sm\">Chat History</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <ScrollArea className=\"h-[600px] p-4\">\n              {chatMessages.length === 0 ? (\n                <div className=\"text-center text-muted-foreground py-8\">\n                  No chat messages yet\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {chatMessages.map((message) => (\n                    <div key={message.id} className=\"flex items-start space-x-3\" data-testid={`chat-message-${message.id}`}>\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold ${\n                        message.isBot ? 'bg-accent text-accent-foreground' : 'bg-primary text-primary-foreground'\n                      }`}>\n                        {message.isBot ? <Bot className=\"h-4 w-4\" /> : <User className=\"h-4 w-4\" />}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <span className=\"font-bold text-sm\" data-testid={`chat-username-${message.id}`}>\n                            {message.username}\n                          </span>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {formatTime(message.timestamp!)}\n                          </span>\n                        </div>\n                        <p className={`text-sm p-3 rounded-lg ${\n                          message.isBot \n                            ? 'bg-accent/20 border border-accent' \n                            : 'bg-muted'\n                        }`} data-testid={`chat-content-${message.id}`}>\n                          {message.content}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </ScrollArea>\n          </CardContent>\n          <CardHeader className=\"p-4 border-t border-border\">\n            <p className=\"text-xs text-muted-foreground text-center flex items-center justify-center gap-2\">\n              <Bot className=\"h-3 w-3\" />\n              AI listens to messages from {aiConfig.listenUser} and responds automatically\n            </p>\n          </CardHeader>\n        </Card>\n      </div>\n\n      {/* AI Configuration */}\n      <div className=\"space-y-6\">\n        <Card className=\"glass-card border-accent\" data-testid=\"ai-config-form\">\n          <CardHeader>\n            <CardTitle className=\"font-pixel text-sm text-accent flex items-center gap-2\">\n              <Brain className=\"h-4 w-4\" />\n              AI Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"ai-model\" className=\"block text-sm font-medium mb-2\">\n                  OpenAI Model\n                </Label>\n                <Select\n                  value={formData.model}\n                  onValueChange={(value) => handleInputChange('model', value)}\n                >\n                  <SelectTrigger className=\"bg-muted border-border focus:border-accent\" data-testid=\"select-ai-model\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"gpt-5\">GPT-5</SelectItem>\n                    <SelectItem value=\"gpt-4\">GPT-4</SelectItem>\n                    <SelectItem value=\"gpt-3.5-turbo\">GPT-3.5 Turbo</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"listen-user\" className=\"block text-sm font-medium mb-2\">\n                  Listen to User\n                </Label>\n                <Input\n                  id=\"listen-user\"\n                  type=\"text\"\n                  value={formData.listenUser}\n                  onChange={(e) => handleInputChange('listenUser', e.target.value)}\n                  className=\"bg-muted border-border focus:border-accent font-mono\"\n                  data-testid=\"input-listen-user\"\n                  required\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                <div>\n                  <Label className=\"text-sm font-medium\">AI Enabled</Label>\n                  <p className=\"text-xs text-muted-foreground\">Parse commands</p>\n                </div>\n                <Switch\n                  checked={formData.enabled}\n                  onCheckedChange={(checked) => handleInputChange('enabled', checked)}\n                  data-testid=\"switch-ai-enabled\"\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Auto-Response</Label>\n                  <p className=\"text-xs text-muted-foreground\">Send replies to chat</p>\n                </div>\n                <Switch\n                  checked={formData.autoResponse}\n                  onCheckedChange={(checked) => handleInputChange('autoResponse', checked)}\n                  data-testid=\"switch-auto-response\"\n                />\n              </div>\n\n              <MinecraftButton\n                type=\"submit\"\n                variant=\"accent\"\n                className=\"w-full\"\n                disabled={isSaving}\n                data-testid=\"button-save-ai-config\"\n              >\n                <Save className=\"h-4 w-4 mr-2\" />\n                {isSaving ? 'Saving...' : 'Save'}\n              </MinecraftButton>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Supported Commands */}\n        <Card className=\"glass-card border-secondary\" data-testid=\"supported-commands\">\n          <CardHeader>\n            <CardTitle className=\"font-pixel text-sm flex items-center gap-2\">\n              <List className=\"h-4 w-4\" />\n              Commands\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 text-xs\">\n              {supportedCommands.map((cmd) => (\n                <div\n                  key={cmd.command}\n                  className=\"p-2 bg-muted rounded font-mono\"\n                  data-testid={`command-${cmd.command}`}\n                >\n                  <span className=\"text-accent font-bold\">{cmd.command}</span>\n                  {cmd.description && <span className=\"text-muted-foreground\"> {cmd.description}</span>}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* AI Stats */}\n        <Card className=\"glass-card border-primary\" data-testid=\"ai-stats\">\n          <CardHeader>\n            <CardTitle className=\"font-pixel text-sm flex items-center gap-2\">\n              <BarChart3 className=\"h-4 w-4\" />\n              AI Stats\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Total Requests:</span>\n                <span className=\"font-bold\" data-testid=\"stat-total-requests\">\n                  {aiConfig.totalRequests}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Commands Parsed:</span>\n                <span className=\"font-bold\" data-testid=\"stat-commands-parsed\">\n                  {aiConfig.commandsParsed}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Avg Response:</span>\n                <span className=\"font-bold\" data-testid=\"stat-avg-response\">\n                  {aiConfig.avgResponseTime}ms\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Success Rate:</span>\n                <span className=\"font-bold text-primary\" data-testid=\"stat-success-rate\">\n                  {aiConfig.successRate}%\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10561},"client/src/components/bot-card.tsx":{"content":"import { Bot } from \"@shared/schema\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { MinecraftButton } from \"@/components/ui/minecraft-button\";\nimport { StatusDot } from \"@/components/ui/status-dot\";\nimport { Trash2, Plug, Power } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface BotCardProps {\n  bot: Bot;\n  onConnect?: (botId: string) => void;\n  onDisconnect?: (botId: string) => void;\n  onDelete?: (botId: string) => void;\n  isAdmin?: boolean;\n}\n\nexport function BotCard({ bot, onConnect, onDisconnect, onDelete, isAdmin = false }: BotCardProps) {\n  const formatUptime = (uptimeSeconds: number) => {\n    const hours = Math.floor(uptimeSeconds / 3600);\n    const minutes = Math.floor((uptimeSeconds % 3600) / 60);\n    return `${hours}h ${minutes}m`;\n  };\n\n  const formatPosition = (position: { x: number; y: number; z: number } | null) => {\n    if (!position) return \"--\";\n    return `X:${position.x} Y:${position.y} Z:${position.z}`;\n  };\n\n  return (\n    <Card className=\"glass-card border-muted hover:border-primary transition-colors\" data-testid={`card-bot-${bot.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <StatusDot status={bot.status as \"online\" | \"offline\" | \"connecting\"} />\n            <div>\n              <h4 className=\"font-bold text-sm\" data-testid={`text-bot-name-${bot.id}`}>\n                {bot.name}\n              </h4>\n              <p className=\"text-xs text-muted-foreground capitalize\" data-testid={`text-bot-status-${bot.id}`}>\n                {bot.status}\n              </p>\n            </div>\n          </div>\n          {isAdmin && onDelete && (\n            <MinecraftButton\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={() => onDelete(bot.id)}\n              className=\"p-2 h-auto\"\n              data-testid={`button-delete-bot-${bot.id}`}\n            >\n              <Trash2 className=\"h-3 w-3\" />\n            </MinecraftButton>\n          )}\n        </div>\n\n        <div className=\"space-y-2 text-xs mb-3\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Health:</span>\n            <span className=\"font-medium\" data-testid={`text-bot-health-${bot.id}`}>\n              {bot.health ? `${bot.health}/20` : \"--\"}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Position:</span>\n            <span className=\"font-mono text-xs\" data-testid={`text-bot-position-${bot.id}`}>\n              {formatPosition(bot.position)}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Uptime:</span>\n            <span data-testid={`text-bot-uptime-${bot.id}`}>\n              {bot.uptime ? formatUptime(bot.uptime) : \"--\"}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Action:</span>\n            <span \n              className={cn(\n                \"font-medium\",\n                bot.status === \"online\" ? \"text-primary\" : \n                bot.status === \"connecting\" ? \"text-accent\" : \"text-destructive\"\n              )}\n              data-testid={`text-bot-action-${bot.id}`}\n            >\n              {bot.currentAction || \"idle\"}\n            </span>\n          </div>\n        </div>\n\n        {isAdmin && (onConnect || onDisconnect) && (\n          <div className=\"grid grid-cols-2 gap-2\">\n            {onConnect && (\n              <MinecraftButton\n                variant=\"primary\"\n                size=\"sm\"\n                onClick={() => onConnect(bot.id)}\n                disabled={bot.status === \"online\" || bot.status === \"connecting\"}\n                data-testid={`button-connect-bot-${bot.id}`}\n              >\n                <Plug className=\"h-3 w-3\" />\n              </MinecraftButton>\n            )}\n            {onDisconnect && (\n              <MinecraftButton\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={() => onDisconnect(bot.id)}\n                disabled={bot.status === \"offline\"}\n                data-testid={`button-disconnect-bot-${bot.id}`}\n              >\n                <Power className=\"h-3 w-3\" />\n              </MinecraftButton>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4519},"client/src/components/log-viewer.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { Log } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MinecraftButton } from \"@/components/ui/minecraft-button\";\nimport { Trash2, Pause, Play } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface LogViewerProps {\n  logs: Log[];\n  onClearLogs?: () => void;\n  isAdmin?: boolean;\n}\n\nexport function LogViewer({ logs, onClearLogs, isAdmin = false }: LogViewerProps) {\n  const [isPaused, setIsPaused] = useState(false);\n  const logContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!isPaused && logContainerRef.current) {\n      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\n    }\n  }, [logs, isPaused]);\n\n  const formatTime = (timestamp: Date | string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });\n  };\n\n  const getLogLevelClass = (level: string) => {\n    const classes = {\n      info: \"border-l-blue-500 text-blue-300\",\n      success: \"border-l-primary text-green-300\",\n      warning: \"border-l-accent text-yellow-300\",\n      error: \"border-l-destructive text-red-300\",\n    };\n    return classes[level as keyof typeof classes] || classes.info;\n  };\n\n  return (\n    <Card className=\"glass-card border-secondary\" data-testid=\"log-viewer\">\n      <CardHeader className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"font-pixel text-sm\">Live Logs</CardTitle>\n          {isAdmin && (\n            <div className=\"flex items-center space-x-2\">\n              {onClearLogs && (\n                <MinecraftButton\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={onClearLogs}\n                  data-testid=\"button-clear-logs\"\n                >\n                  <Trash2 className=\"h-3 w-3 mr-1\" />\n                  Clear\n                </MinecraftButton>\n              )}\n              <MinecraftButton\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={() => setIsPaused(!isPaused)}\n                data-testid=\"button-pause-logs\"\n              >\n                {isPaused ? (\n                  <>\n                    <Play className=\"h-3 w-3 mr-1\" />\n                    Resume\n                  </>\n                ) : (\n                  <>\n                    <Pause className=\"h-3 w-3 mr-1\" />\n                    Pause\n                  </>\n                )}\n              </MinecraftButton>\n            </div>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        <div\n          ref={logContainerRef}\n          className=\"p-4 bg-black/50 max-h-96 overflow-y-auto font-mono text-xs space-y-1\"\n          data-testid=\"log-container\"\n        >\n          {logs.length === 0 ? (\n            <div className=\"text-center text-muted-foreground py-8\">\n              No logs available\n            </div>\n          ) : (\n            logs.map((log) => (\n              <div\n                key={log.id}\n                className={cn(\n                  \"log-entry p-2 border-l-3 pl-3\",\n                  getLogLevelClass(log.level)\n                )}\n                data-testid={`log-entry-${log.id}`}\n              >\n                <span className=\"text-muted-foreground mr-2\">\n                  [{formatTime(log.timestamp!)}]\n                </span>\n                <span>{log.message}</span>\n              </div>\n            ))\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3664},"client/src/components/server-config.tsx":{"content":"import { useState } from \"react\";\nimport { ServerConfig as ServerConfigType, InsertServerConfig } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { MinecraftButton } from \"@/components/ui/minecraft-button\";\nimport { StatusDot } from \"@/components/ui/status-dot\";\nimport { Server, Network, Key, Save, TestTube } from \"lucide-react\";\n\ninterface ServerConfigProps {\n  config: ServerConfigType;\n  onSave: (config: InsertServerConfig) => void;\n  onTest?: () => void;\n  isSaving?: boolean;\n  isTesting?: boolean;\n}\n\nexport function ServerConfigComponent({ config, onSave, onTest, isSaving = false, isTesting = false }: ServerConfigProps) {\n  const [formData, setFormData] = useState<InsertServerConfig>({\n    ip: config.ip,\n    port: config.port,\n    password: config.password,\n    followTarget: config.followTarget,\n    autoReconnect: config.autoReconnect,\n    reconnectDelay: config.reconnectDelay,\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSave(formData);\n  };\n\n  const handleInputChange = (field: keyof InsertServerConfig, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"max-w-2xl\">\n      <Card className=\"glass-card border-primary\" data-testid=\"server-config-form\">\n        <CardHeader>\n          <CardTitle className=\"font-pixel text-lg\">Server Configuration</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"server-ip\" className=\"flex items-center gap-2 mb-2\">\n                <Server className=\"h-4 w-4 text-primary\" />\n                Server IP Address\n              </Label>\n              <Input\n                id=\"server-ip\"\n                type=\"text\"\n                placeholder=\"tbcraft.cbu.net\"\n                value={formData.ip}\n                onChange={(e) => handleInputChange('ip', e.target.value)}\n                className=\"bg-muted border-border focus:border-primary font-mono\"\n                data-testid=\"input-server-ip\"\n                required\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Enter the Minecraft server IP or hostname\n              </p>\n            </div>\n\n            <div>\n              <Label htmlFor=\"server-port\" className=\"flex items-center gap-2 mb-2\">\n                <Network className=\"h-4 w-4 text-primary\" />\n                Server Port\n              </Label>\n              <Input\n                id=\"server-port\"\n                type=\"number\"\n                placeholder=\"25565\"\n                value={formData.port}\n                onChange={(e) => handleInputChange('port', parseInt(e.target.value) || 25565)}\n                className=\"bg-muted border-border focus:border-primary font-mono\"\n                data-testid=\"input-server-port\"\n                min=\"1\"\n                max=\"65535\"\n                required\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Default Minecraft port is 25565\n              </p>\n            </div>\n\n            <div>\n              <Label htmlFor=\"bot-password\" className=\"flex items-center gap-2 mb-2\">\n                <Key className=\"h-4 w-4 text-primary\" />\n                Bot Password\n              </Label>\n              <Input\n                id=\"bot-password\"\n                type=\"password\"\n                placeholder=\"Enter bot login password\"\n                value={formData.password}\n                onChange={(e) => handleInputChange('password', e.target.value)}\n                className=\"bg-muted border-border focus:border-primary font-mono\"\n                data-testid=\"input-bot-password\"\n                required\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Password used for bot auto-registration and login\n              </p>\n            </div>\n\n            <div className=\"border-t border-border pt-6\">\n              <h4 className=\"font-pixel text-sm mb-4\">Connection Settings</h4>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"reconnect-delay\" className=\"block text-sm font-medium mb-2\">\n                    Auto-Reconnect Delay (seconds)\n                  </Label>\n                  <Input\n                    id=\"reconnect-delay\"\n                    type=\"number\"\n                    value={formData.reconnectDelay}\n                    onChange={(e) => handleInputChange('reconnectDelay', parseInt(e.target.value) || 30)}\n                    className=\"bg-muted border-border focus:border-primary font-mono\"\n                    data-testid=\"input-reconnect-delay\"\n                    min=\"1\"\n                    max=\"300\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"follow-target\" className=\"block text-sm font-medium mb-2\">\n                    Default Follow Target\n                  </Label>\n                  <Input\n                    id=\"follow-target\"\n                    type=\"text\"\n                    placeholder=\"rabbit0009\"\n                    value={formData.followTarget}\n                    onChange={(e) => handleInputChange('followTarget', e.target.value)}\n                    className=\"bg-muted border-border focus:border-primary font-mono\"\n                    data-testid=\"input-follow-target\"\n                    required\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-muted rounded-lg\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Auto-Reconnect</Label>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Automatically reconnect bots on disconnect\n                    </p>\n                  </div>\n                  <Switch\n                    checked={formData.autoReconnect}\n                    onCheckedChange={(checked) => handleInputChange('autoReconnect', checked)}\n                    data-testid=\"switch-auto-reconnect\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex space-x-4\">\n              <MinecraftButton\n                type=\"submit\"\n                variant=\"primary\"\n                className=\"flex-1\"\n                disabled={isSaving}\n                data-testid=\"button-save-config\"\n              >\n                <Save className=\"h-4 w-4 mr-2\" />\n                {isSaving ? 'Saving...' : 'Save Configuration'}\n              </MinecraftButton>\n              {onTest && (\n                <MinecraftButton\n                  type=\"button\"\n                  variant=\"accent\"\n                  onClick={onTest}\n                  disabled={isTesting}\n                  data-testid=\"button-test-connection\"\n                >\n                  <TestTube className=\"h-4 w-4 mr-2\" />\n                  {isTesting ? 'Testing...' : 'Test'}\n                </MinecraftButton>\n              )}\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Connection Status */}\n      <Card className=\"glass-card border-primary mt-6\" data-testid=\"connection-status\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <StatusDot status=\"online\" />\n              <div>\n                <p className=\"font-medium\">Server Status</p>\n                <p className=\"text-xs text-muted-foreground\" data-testid=\"text-server-address\">\n                  {config.ip}:{config.port}\n                </p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm font-bold text-primary\" data-testid=\"text-server-ping\">\n                42ms\n              </p>\n              <p className=\"text-xs text-muted-foreground\">Latency</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8276},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2832},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\ninterface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\nexport function useWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n  const ws = useRef<WebSocket | null>(null);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const messageHandlers = useRef<Map<string, (data: any) => void>>(new Map());\n\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const connect = () => {\n      ws.current = new WebSocket(wsUrl);\n\n      ws.current.onopen = () => {\n        setIsConnected(true);\n        console.log('WebSocket connected');\n      };\n\n      ws.current.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          setLastMessage(message);\n          \n          // Call specific handler if registered\n          const handler = messageHandlers.current.get(message.type);\n          if (handler) {\n            handler(message.data);\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      ws.current.onclose = () => {\n        setIsConnected(false);\n        console.log('WebSocket disconnected, attempting to reconnect...');\n        \n        // Reconnect after 3 seconds\n        setTimeout(connect, 3000);\n      };\n\n      ws.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    };\n\n    connect();\n\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, []);\n\n  const onMessage = (type: string, handler: (data: any) => void) => {\n    messageHandlers.current.set(type, handler);\n  };\n\n  const send = (message: any) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  return {\n    isConnected,\n    lastMessage,\n    onMessage,\n    send,\n  };\n}\n","size_bytes":2050},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element | null;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path}><Component /></Route>\n}\n","size_bytes":709},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Redirect } from \"wouter\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { Bot, Log, ChatMessage, ServerConfig, AiConfig, ServerStats, BotAction } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Components\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MinecraftButton } from \"@/components/ui/minecraft-button\";\nimport { StatusDot } from \"@/components/ui/status-dot\";\nimport { BotCard } from \"@/components/bot-card\";\nimport { LogViewer } from \"@/components/log-viewer\";\nimport { ServerConfigComponent } from \"@/components/server-config\";\nimport { AiChat } from \"@/components/ai-chat\";\n\n// Icons\nimport { \n  Box, LogOut, LayoutDashboard, Bot as BotIcon, Sliders, Terminal, \n  Settings, MessageSquare, Plus, StopCircle, RefreshCw, \n  User, Sword, MapPin, Play, MessageCircle, Send,\n  Server, Heart, Clock, Brain\n} from \"lucide-react\";\n\nexport default function AdminDashboard() {\n  const { user, logoutMutation } = useAuth();\n  const { toast } = useToast();\n  const isMobile = useIsMobile();\n  const [activeView, setActiveView] = useState(\"dashboard\");\n  const [selectedBot, setSelectedBot] = useState<string>(\"all\");\n  const [customCommand, setCustomCommand] = useState(\"\");\n\n  // Redirect non-admin users\n  if (user && user.role !== \"admin\") {\n    return <Redirect to=\"/user\" />;\n  }\n\n  // WebSocket connection\n  const { isConnected, onMessage } = useWebSocket();\n\n  // State for real-time data\n  const [bots, setBots] = useState<Bot[]>([]);\n  const [logs, setLogs] = useState<Log[]>([]);\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);\n  const [serverStats, setServerStats] = useState<ServerStats>({\n    totalBots: 0,\n    onlineBots: 0,\n    offlineBots: 0,\n    avgHealth: 0,\n    avgUptime: 0,\n    serverPing: 0,\n  });\n\n  // Query for initial data\n  const { data: initialBots } = useQuery<Bot[]>({\n    queryKey: [\"/api/bots\"],\n    enabled: !!user,\n  });\n\n  const { data: initialLogs } = useQuery<Log[]>({\n    queryKey: [\"/api/logs\"],\n    enabled: !!user,\n  });\n\n  const { data: initialChatMessages } = useQuery<ChatMessage[]>({\n    queryKey: [\"/api/chat\"],\n    enabled: !!user,\n  });\n\n  const { data: serverConfig } = useQuery<ServerConfig>({\n    queryKey: [\"/api/server-config\"],\n    enabled: !!user,\n  });\n\n  const { data: aiConfig } = useQuery<AiConfig>({\n    queryKey: [\"/api/ai-config\"],\n    enabled: !!user,\n  });\n\n  const { data: initialStats } = useQuery<ServerStats>({\n    queryKey: [\"/api/server-stats\"],\n    enabled: !!user,\n  });\n\n  // Initialize state from query data\n  useEffect(() => {\n    if (initialBots) setBots(initialBots);\n  }, [initialBots]);\n\n  useEffect(() => {\n    if (initialLogs) setLogs(initialLogs);\n  }, [initialLogs]);\n\n  useEffect(() => {\n    if (initialChatMessages) setChatMessages(initialChatMessages);\n  }, [initialChatMessages]);\n\n  useEffect(() => {\n    if (initialStats) setServerStats(initialStats);\n  }, [initialStats]);\n\n  // WebSocket event handlers\n  useEffect(() => {\n    onMessage('bots-update', (data: Bot[]) => {\n      setBots(data);\n    });\n\n    onMessage('log-added', (data: Log) => {\n      setLogs(prev => [data, ...prev].slice(0, 100));\n    });\n\n    onMessage('chat-message', (data: ChatMessage) => {\n      setChatMessages(prev => [data, ...prev].slice(0, 50));\n    });\n\n    onMessage('server-stats', (data: ServerStats) => {\n      setServerStats(data);\n    });\n\n    onMessage('server-config-update', () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/server-config\"] });\n    });\n\n    onMessage('ai-config-update', () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ai-config\"] });\n    });\n  }, [onMessage]);\n\n  // Mutations\n  const spawnBotMutation = useMutation({\n    mutationFn: async (name?: string) => {\n      const res = await apiRequest(\"POST\", \"/api/bots\", name ? { name } : {});\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Bot spawned successfully\", variant: \"default\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to spawn bot\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const spawnMultipleBotsMutation = useMutation({\n    mutationFn: async (count: number) => {\n      const res = await apiRequest(\"POST\", \"/api/bots/spawn-multiple\", { count });\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Bots spawned successfully\", variant: \"default\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to spawn bots\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const connectBotMutation = useMutation({\n    mutationFn: async (botId: string) => {\n      await apiRequest(\"POST\", `/api/bots/${botId}/connect`);\n    },\n    onSuccess: () => {\n      toast({ title: \"Bot connection initiated\", variant: \"default\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to connect bot\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const disconnectBotMutation = useMutation({\n    mutationFn: async (botId: string) => {\n      await apiRequest(\"POST\", `/api/bots/${botId}/disconnect`);\n    },\n    onSuccess: () => {\n      toast({ title: \"Bot disconnected\", variant: \"default\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to disconnect bot\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteBotMutation = useMutation({\n    mutationFn: async (botId: string) => {\n      await apiRequest(\"DELETE\", `/api/bots/${botId}`);\n    },\n    onSuccess: () => {\n      toast({ title: \"Bot deleted\", variant: \"default\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to delete bot\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const connectAllBotsMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/bots/connect-all\");\n    },\n    onSuccess: () => {\n      toast({ title: \"Connecting all bots\", variant: \"default\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to connect all bots\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const disconnectAllBotsMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/bots/disconnect-all\");\n    },\n    onSuccess: () => {\n      toast({ title: \"Disconnecting all bots\", variant: \"default\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to disconnect all bots\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const botActionMutation = useMutation({\n    mutationFn: async (action: BotAction) => {\n      await apiRequest(\"POST\", \"/api/bots/action\", action);\n    },\n    onSuccess: () => {\n      toast({ title: \"Action executed\", variant: \"default\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to execute action\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateServerConfigMutation = useMutation({\n    mutationFn: async (config: any) => {\n      const res = await apiRequest(\"POST\", \"/api/server-config\", config);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Server configuration saved\", variant: \"default\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to save configuration\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateAiConfigMutation = useMutation({\n    mutationFn: async (config: any) => {\n      const res = await apiRequest(\"POST\", \"/api/ai-config\", config);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"AI configuration saved\", variant: \"default\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to save AI configuration\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const clearLogsMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", \"/api/logs\");\n    },\n    onSuccess: () => {\n      setLogs([]);\n      toast({ title: \"Logs cleared\", variant: \"default\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to clear logs\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Action handlers\n  const handleBotAction = (action: string, target?: string) => {\n    const botIds = selectedBot === \"all\" ? undefined : [selectedBot];\n    \n    botActionMutation.mutate({\n      action: action as any,\n      target,\n      botIds,\n      customCommand: action === \"command\" || action === \"chat\" ? customCommand : undefined,\n    });\n\n    if (action === \"command\" || action === \"chat\") {\n      setCustomCommand(\"\");\n    }\n  };\n\n  const handleCustomCommand = () => {\n    if (!customCommand.trim()) return;\n    \n    const action = customCommand.startsWith(\"/\") ? \"command\" : \"chat\";\n    handleBotAction(action);\n  };\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  // Desktop sidebar navigation items\n  const sidebarItems = [\n    { id: \"dashboard\", label: \"LayoutDashboard\", icon: LayoutDashboard },\n    { id: \"bots\", label: \"Bots\", icon: BotIcon },\n    { id: \"controls\", label: \"Global Controls\", icon: Sliders },\n    { id: \"logs\", label: \"Logs\", icon: Terminal },\n    { id: \"server-config\", label: \"Server Config\", icon: Settings },\n    { id: \"ai-chat\", label: \"AI Chat\", icon: MessageSquare },\n  ];\n\n  // Mobile navigation items\n  const mobileNavItems = [\n    { id: \"dashboard\", label: \"Home\", icon: LayoutDashboard },\n    { id: \"bots\", label: \"Bots\", icon: BotIcon },\n    { id: \"controls\", label: \"Control\", icon: Sliders },\n    { id: \"logs\", label: \"Logs\", icon: Terminal },\n    { id: \"more\", label: \"More\", icon: Settings },\n  ];\n\n  if (!user) return null;\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Header */}\n      <header className=\"gradient-header sticky top-0 z-50 shadow-lg\" data-testid=\"admin-header\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Box className=\"h-8 w-8 text-primary\" />\n            <div>\n              <h1 className=\"font-pixel text-lg text-primary\">Bot Manager</h1>\n              <p className=\"text-xs text-muted-foreground\">Administrator Panel</p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            {/* Real-time Stats */}\n            <div className=\"hidden md:flex items-center space-x-6 text-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <StatusDot status=\"online\" />\n                <span data-testid=\"stat-online-bots\">{serverStats.onlineBots}</span>\n                <span className=\"text-muted-foreground\">Online</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <StatusDot status=\"offline\" />\n                <span data-testid=\"stat-offline-bots\">{serverStats.offlineBots}</span>\n                <span className=\"text-muted-foreground\">Offline</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Server className=\"h-4 w-4 text-primary\" />\n                <span className=\"text-primary font-medium\" data-testid=\"server-status\">\n                  {isConnected ? \"Connected\" : \"Disconnected\"}\n                </span>\n              </div>\n            </div>\n\n            {/* User Menu */}\n            <div className=\"flex items-center space-x-3 border-l border-border pl-4\">\n              <div className=\"text-right hidden md:block\">\n                <p className=\"text-sm font-medium\" data-testid=\"admin-username\">{user.username}</p>\n                <p className=\"text-xs text-primary\">Administrator</p>\n              </div>\n              <MinecraftButton\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={handleLogout}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n              </MinecraftButton>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Stats Bar */}\n        <div className=\"md:hidden border-t border-border px-4 py-2 flex justify-around text-xs\">\n          <div className=\"flex items-center space-x-1\">\n            <StatusDot status=\"online\" />\n            <span>{serverStats.onlineBots}</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <StatusDot status=\"offline\" />\n            <span>{serverStats.offlineBots}</span>\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Server className=\"h-3 w-3 text-primary\" />\n            <span className=\"text-primary\">{isConnected ? \"OK\" : \"ERR\"}</span>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex\">\n        {/* Desktop Sidebar */}\n        {!isMobile && (\n          <aside className=\"w-64 bg-card border-r border-border min-h-screen sticky top-[120px] overflow-y-auto\">\n            <nav className=\"p-4 space-y-2\">\n              {sidebarItems.map((item) => (\n                <button\n                  key={item.id}\n                  onClick={() => setActiveView(item.id)}\n                  className={`w-full text-left px-4 py-3 rounded-lg font-medium flex items-center space-x-3 transition-colors ${\n                    activeView === item.id\n                      ? \"bg-primary text-primary-foreground\"\n                      : \"hover:bg-muted\"\n                  }`}\n                  data-testid={`nav-${item.id}`}\n                >\n                  <item.icon className=\"h-5 w-5\" />\n                  <span>{item.label}</span>\n                </button>\n              ))}\n            </nav>\n\n            {/* Quick Actions */}\n            <div className=\"p-4 border-t border-border\">\n              <h3 className=\"font-pixel text-xs mb-4 text-primary\">Quick Actions</h3>\n              <div className=\"space-y-2\">\n                <MinecraftButton\n                  variant=\"primary\"\n                  size=\"sm\"\n                  className=\"w-full\"\n                  onClick={() => spawnMultipleBotsMutation.mutate(10)}\n                  disabled={spawnMultipleBotsMutation.isPending}\n                  data-testid=\"button-spawn-10\"\n                >\n                  <Plus className=\"h-3 w-3 mr-2\" />\n                  Spawn 10\n                </MinecraftButton>\n                <MinecraftButton\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  className=\"w-full\"\n                  onClick={() => disconnectAllBotsMutation.mutate()}\n                  disabled={disconnectAllBotsMutation.isPending}\n                  data-testid=\"button-stop-all\"\n                >\n                  <StopCircle className=\"h-3 w-3 mr-2\" />\n                  Stop All\n                </MinecraftButton>\n              </div>\n            </div>\n          </aside>\n        )}\n\n        {/* Main Content */}\n        <main className=\"flex-1 p-6 overflow-y-auto pb-24 md:pb-6\">\n          {/* LayoutDashboard View */}\n          {activeView === \"dashboard\" && (\n            <section data-testid=\"dashboard-section\">\n              <div className=\"mb-6\">\n                <h2 className=\"font-pixel text-xl mb-2\">LayoutDashboard</h2>\n                <p className=\"text-muted-foreground\">Monitor and control all your Minecraft bots</p>\n              </div>\n\n              {/* Statistics Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n                <Card className=\"glass-card border-primary\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <BotIcon className=\"h-8 w-8 text-primary\" />\n                      <StatusDot status=\"online\" />\n                    </div>\n                    <h3 className=\"text-3xl font-bold mb-1\" data-testid=\"stat-total-bots\">\n                      {serverStats.totalBots}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">Total Bots</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"glass-card border-primary\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Heart className=\"h-8 w-8 text-destructive\" />\n                      <span className=\"text-sm text-muted-foreground\">AVG</span>\n                    </div>\n                    <h3 className=\"text-3xl font-bold mb-1\" data-testid=\"stat-avg-health\">\n                      {serverStats.avgHealth}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">Average Health</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"glass-card border-accent\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Clock className=\"h-8 w-8 text-accent\" />\n                      <span className=\"text-sm text-muted-foreground\">HRS</span>\n                    </div>\n                    <h3 className=\"text-3xl font-bold mb-1\" data-testid=\"stat-avg-uptime\">\n                      {serverStats.avgUptime}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">Avg Uptime</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"glass-card border-secondary\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <Brain className=\"h-8 w-8 text-secondary\" />\n                      <span className=\"text-sm text-muted-foreground\">AI</span>\n                    </div>\n                    <h3 className=\"text-3xl font-bold mb-1\" data-testid=\"stat-ai-requests\">\n                      {aiConfig?.totalRequests || 0}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">AI Requests</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Bot Grid */}\n              <div className=\"mb-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-pixel text-lg\">Active Bots</h3>\n                  <MinecraftButton\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    onClick={() => queryClient.invalidateQueries({ queryKey: [\"/api/bots\"] })}\n                    data-testid=\"button-refresh-bots\"\n                  >\n                    <RefreshCw className=\"h-3 w-3 mr-2\" />\n                    Refresh\n                  </MinecraftButton>\n                </div>\n\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4\">\n                  {bots.length === 0 ? (\n                    <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n                      No bots available. Spawn some bots to get started.\n                    </div>\n                  ) : (\n                    bots.map((bot) => (\n                      <BotCard\n                        key={bot.id}\n                        bot={bot}\n                        onConnect={(botId) => connectBotMutation.mutate(botId)}\n                        onDisconnect={(botId) => disconnectBotMutation.mutate(botId)}\n                        onDelete={(botId) => deleteBotMutation.mutate(botId)}\n                        isAdmin={true}\n                      />\n                    ))\n                  )}\n                </div>\n              </div>\n\n              {/* Bot Control Panel */}\n              <Card className=\"glass-card border-primary mb-6\">\n                <CardHeader>\n                  <CardTitle className=\"font-pixel text-lg\">Bot Control Panel</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"mb-4\">\n                    <Label htmlFor=\"bot-select\" className=\"block text-sm font-medium mb-2\">\n                      Select Bot\n                    </Label>\n                    <Select value={selectedBot} onValueChange={setSelectedBot}>\n                      <SelectTrigger className=\"bg-muted border-border focus:border-primary\" data-testid=\"select-bot\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Bots</SelectItem>\n                        {bots.map((bot) => (\n                          <SelectItem key={bot.id} value={bot.id}>\n                            {bot.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 mb-4\">\n                    <MinecraftButton\n                      variant=\"primary\"\n                      onClick={() => handleBotAction(\"follow\", serverConfig?.followTarget)}\n                      data-testid=\"button-follow\"\n                    >\n                      <User className=\"h-3 w-3 mr-2\" />\n                      Follow\n                    </MinecraftButton>\n                    <MinecraftButton\n                      variant=\"destructive\"\n                      onClick={() => handleBotAction(\"attack\")}\n                      data-testid=\"button-attack\"\n                    >\n                      <Sword className=\"h-3 w-3 mr-2\" />\n                      Attack\n                    </MinecraftButton>\n                    <MinecraftButton\n                      variant=\"accent\"\n                      onClick={() => handleBotAction(\"antiafk\")}\n                      data-testid=\"button-antiafk\"\n                    >\n                      <Play className=\"h-3 w-3 mr-2\" />\n                      Anti-AFK\n                    </MinecraftButton>\n                    <MinecraftButton\n                      variant=\"secondary\"\n                      onClick={() => handleBotAction(\"stop\")}\n                      data-testid=\"button-stop\"\n                    >\n                      <StopCircle className=\"h-3 w-3 mr-2\" />\n                      Stop\n                    </MinecraftButton>\n                    <MinecraftButton\n                      variant=\"primary\"\n                      onClick={() => handleBotAction(\"teleport\", serverConfig?.followTarget)}\n                      data-testid=\"button-teleport\"\n                    >\n                      <MapPin className=\"h-3 w-3 mr-2\" />\n                      Teleport\n                    </MinecraftButton>\n                    <MinecraftButton\n                      variant=\"secondary\"\n                      onClick={() => handleBotAction(\"command\")}\n                      data-testid=\"button-command\"\n                    >\n                      <Terminal className=\"h-3 w-3 mr-2\" />\n                      Command\n                    </MinecraftButton>\n                    <MinecraftButton\n                      variant=\"accent\"\n                      onClick={() => handleBotAction(\"chat\")}\n                      data-testid=\"button-chat\"\n                    >\n                      <MessageCircle className=\"h-3 w-3 mr-2\" />\n                      Chat\n                    </MinecraftButton>\n                    <MinecraftButton\n                      variant=\"primary\"\n                      onClick={() => queryClient.invalidateQueries({ queryKey: [\"/api/bots\"] })}\n                      data-testid=\"button-refresh\"\n                    >\n                      <RefreshCw className=\"h-3 w-3 mr-2\" />\n                      Refresh\n                    </MinecraftButton>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"custom-command\" className=\"block text-sm font-medium mb-2\">\n                      Custom Command\n                    </Label>\n                    <div className=\"flex space-x-2\">\n                      <Input\n                        id=\"custom-command\"\n                        type=\"text\"\n                        placeholder=\"/tp rabbit0009 or chat message...\"\n                        value={customCommand}\n                        onChange={(e) => setCustomCommand(e.target.value)}\n                        className=\"flex-1 bg-muted border-border focus:border-primary font-mono text-sm\"\n                        data-testid=\"input-custom-command\"\n                        onKeyDown={(e) => e.key === 'Enter' && handleCustomCommand()}\n                      />\n                      <MinecraftButton\n                        variant=\"primary\"\n                        onClick={handleCustomCommand}\n                        disabled={!customCommand.trim()}\n                        data-testid=\"button-execute-command\"\n                      >\n                        <Send className=\"h-4 w-4\" />\n                      </MinecraftButton>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Live Logs */}\n              <LogViewer \n                logs={logs} \n                onClearLogs={() => clearLogsMutation.mutate()}\n                isAdmin={true}\n              />\n            </section>\n          )}\n\n          {/* Other Views */}\n          {activeView === \"bots\" && (\n            <section data-testid=\"bots-section\">\n              <div className=\"mb-6\">\n                <h2 className=\"font-pixel text-xl mb-2\">Bot Management</h2>\n                <p className=\"text-muted-foreground\">Manage individual bot instances</p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {bots.map((bot) => (\n                  <BotCard\n                    key={bot.id}\n                    bot={bot}\n                    onConnect={(botId) => connectBotMutation.mutate(botId)}\n                    onDisconnect={(botId) => disconnectBotMutation.mutate(botId)}\n                    onDelete={(botId) => deleteBotMutation.mutate(botId)}\n                    isAdmin={true}\n                  />\n                ))}\n              </div>\n            </section>\n          )}\n\n          {activeView === \"controls\" && (\n            <section data-testid=\"controls-section\">\n              <div className=\"mb-6\">\n                <h2 className=\"font-pixel text-xl mb-2\">Global Controls</h2>\n                <p className=\"text-muted-foreground\">Control all bots simultaneously</p>\n              </div>\n\n              <div className=\"grid gap-4\">\n                <Card className=\"glass-card border-primary\">\n                  <CardHeader>\n                    <CardTitle>Spawn Controls</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <MinecraftButton\n                      variant=\"primary\"\n                      onClick={() => spawnMultipleBotsMutation.mutate(10)}\n                      disabled={spawnMultipleBotsMutation.isPending}\n                      data-testid=\"button-spawn-10-bots\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Spawn 10 Bots\n                    </MinecraftButton>\n                    <MinecraftButton\n                      variant=\"primary\"\n                      onClick={() => spawnBotMutation.mutate(undefined)}\n                      disabled={spawnBotMutation.isPending}\n                      data-testid=\"button-spawn-single-bot\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Spawn Single Bot\n                    </MinecraftButton>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"glass-card border-secondary\">\n                  <CardHeader>\n                    <CardTitle>Connection Controls</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <MinecraftButton\n                      variant=\"primary\"\n                      onClick={() => connectAllBotsMutation.mutate()}\n                      disabled={connectAllBotsMutation.isPending}\n                      data-testid=\"button-connect-all-bots\"\n                    >\n                      <Play className=\"h-4 w-4 mr-2\" />\n                      Connect All Bots\n                    </MinecraftButton>\n                    <MinecraftButton\n                      variant=\"destructive\"\n                      onClick={() => disconnectAllBotsMutation.mutate()}\n                      disabled={disconnectAllBotsMutation.isPending}\n                      data-testid=\"button-disconnect-all-bots\"\n                    >\n                      <StopCircle className=\"h-4 w-4 mr-2\" />\n                      Disconnect All Bots\n                    </MinecraftButton>\n                  </CardContent>\n                </Card>\n              </div>\n            </section>\n          )}\n\n          {activeView === \"logs\" && (\n            <section data-testid=\"logs-section\">\n              <div className=\"mb-6\">\n                <h2 className=\"font-pixel text-xl mb-2\">System Logs</h2>\n                <p className=\"text-muted-foreground\">Monitor bot activities and system events</p>\n              </div>\n\n              <LogViewer \n                logs={logs} \n                onClearLogs={() => clearLogsMutation.mutate()}\n                isAdmin={true}\n              />\n            </section>\n          )}\n\n          {activeView === \"server-config\" && serverConfig && (\n            <section data-testid=\"server-config-section\">\n              <div className=\"mb-6\">\n                <h2 className=\"font-pixel text-xl mb-2\">Server Configuration</h2>\n                <p className=\"text-muted-foreground\">Configure Minecraft server connection settings</p>\n              </div>\n\n              <ServerConfigComponent\n                config={serverConfig}\n                onSave={(config) => updateServerConfigMutation.mutate(config)}\n                isSaving={updateServerConfigMutation.isPending}\n              />\n            </section>\n          )}\n\n          {activeView === \"ai-chat\" && aiConfig && (\n            <section data-testid=\"ai-chat-section\">\n              <div className=\"mb-6\">\n                <h2 className=\"font-pixel text-xl mb-2\">AI Chat Integration</h2>\n                <p className=\"text-muted-foreground\">Monitor and configure OpenAI GPT-5 chat commands</p>\n              </div>\n\n              <AiChat\n                chatMessages={chatMessages}\n                aiConfig={aiConfig}\n                onSaveConfig={(config) => updateAiConfigMutation.mutate(config)}\n                isSaving={updateAiConfigMutation.isPending}\n              />\n            </section>\n          )}\n        </main>\n      </div>\n\n      {/* Mobile Bottom Navigation */}\n      {isMobile && (\n        <nav className=\"fixed bottom-0 left-0 right-0 bg-card border-t border-border z-40\" data-testid=\"mobile-nav\">\n          <div className=\"grid grid-cols-5 gap-1 p-2\">\n            {mobileNavItems.map((item) => (\n              <button\n                key={item.id}\n                onClick={() => setActiveView(item.id === \"more\" ? \"server-config\" : item.id)}\n                className={`flex flex-col items-center justify-center py-2 ${\n                  activeView === item.id || (item.id === \"more\" && (activeView === \"server-config\" || activeView === \"ai-chat\"))\n                    ? \"text-primary\"\n                    : \"text-muted-foreground\"\n                }`}\n                data-testid={`mobile-nav-${item.id}`}\n              >\n                <item.icon className=\"h-5 w-5 mb-1\" />\n                <span className=\"text-xs font-pixel\">{item.label}</span>\n              </button>\n            ))}\n          </div>\n        </nav>\n      )}\n    </div>\n  );\n}\n","size_bytes":32379},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Redirect } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { MinecraftButton } from \"@/components/ui/minecraft-button\";\nimport { Loader2, User, Lock, ShieldQuestion, Box } from \"lucide-react\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [loginData, setLoginData] = useState({ username: \"\", password: \"\", role: \"user\" });\n  const [registerData, setRegisterData] = useState({ username: \"\", password: \"\", role: \"user\" });\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginData);\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    registerMutation.mutate(registerData);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-background via-background to-primary/5\">\n      <div className=\"w-full max-w-6xl grid lg:grid-cols-2 gap-8 items-center\">\n        {/* Hero Section */}\n        <div className=\"hidden lg:block space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <div className=\"relative\">\n                <Box className=\"h-24 w-24 text-primary animate-pulse\" />\n                <div className=\"absolute inset-0 bg-primary/20 blur-xl rounded-full\"></div>\n              </div>\n            </div>\n            <h1 className=\"font-pixel text-4xl mb-4 text-primary\">\n              Minecraft Bot Manager\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-8\">\n              Professional bot management system for Minecraft servers\n            </p>\n          </div>\n\n          <div className=\"space-y-6 glass-card p-6 rounded-lg border\">\n            <h3 className=\"font-pixel text-lg text-primary\">Features</h3>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                <span>Multi-bot management</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                <span>Real-time monitoring</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                <span>AI command parsing</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                <span>Auto-reconnection</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                <span>Role-based access</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                <span>Mobile responsive</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"text-center text-sm text-muted-foreground\">\n            <p>Demo Credentials:</p>\n            <p><strong>Admin:</strong> admin / admin123</p>\n            <p><strong>User:</strong> user / user123</p>\n          </div>\n        </div>\n\n        {/* Auth Forms */}\n        <Card className=\"glass-card border-primary\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4 lg:hidden\">\n              <Box className=\"h-12 w-12 text-primary\" />\n            </div>\n            <CardTitle className=\"font-pixel text-xl text-primary\">\n              Access Control\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"login\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"login\" className=\"font-pixel text-xs\">\n                  Login\n                </TabsTrigger>\n                <TabsTrigger value=\"register\" className=\"font-pixel text-xs\">\n                  Register\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"login\">\n                <form onSubmit={handleLogin} className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"login-username\" className=\"flex items-center gap-2 mb-2\">\n                      <User className=\"h-4 w-4\" />\n                      Username\n                    </Label>\n                    <Input\n                      id=\"login-username\"\n                      type=\"text\"\n                      placeholder=\"Enter username\"\n                      value={loginData.username}\n                      onChange={(e) => setLoginData(prev => ({ ...prev, username: e.target.value }))}\n                      className=\"bg-muted border-border focus:border-primary\"\n                      data-testid=\"input-login-username\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"login-password\" className=\"flex items-center gap-2 mb-2\">\n                      <Lock className=\"h-4 w-4\" />\n                      Password\n                    </Label>\n                    <Input\n                      id=\"login-password\"\n                      type=\"password\"\n                      placeholder=\"Enter password\"\n                      value={loginData.password}\n                      onChange={(e) => setLoginData(prev => ({ ...prev, password: e.target.value }))}\n                      className=\"bg-muted border-border focus:border-primary\"\n                      data-testid=\"input-login-password\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label className=\"flex items-center gap-2 mb-2\">\n                      <ShieldQuestion className=\"h-4 w-4\" />\n                      Role\n                    </Label>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <MinecraftButton\n                        type=\"button\"\n                        variant={loginData.role === \"admin\" ? \"primary\" : \"secondary\"}\n                        onClick={() => setLoginData(prev => ({ ...prev, role: \"admin\" }))}\n                        data-testid=\"button-role-admin\"\n                      >\n                        Admin\n                      </MinecraftButton>\n                      <MinecraftButton\n                        type=\"button\"\n                        variant={loginData.role === \"user\" ? \"primary\" : \"secondary\"}\n                        onClick={() => setLoginData(prev => ({ ...prev, role: \"user\" }))}\n                        data-testid=\"button-role-user\"\n                      >\n                        User\n                      </MinecraftButton>\n                    </div>\n                  </div>\n\n                  <MinecraftButton\n                    type=\"submit\"\n                    variant=\"primary\"\n                    className=\"w-full\"\n                    disabled={loginMutation.isPending}\n                    data-testid=\"button-login-submit\"\n                  >\n                    {loginMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Logging in...\n                      </>\n                    ) : (\n                      'Login'\n                    )}\n                  </MinecraftButton>\n                </form>\n              </TabsContent>\n\n              <TabsContent value=\"register\">\n                <form onSubmit={handleRegister} className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"register-username\" className=\"flex items-center gap-2 mb-2\">\n                      <User className=\"h-4 w-4\" />\n                      Username\n                    </Label>\n                    <Input\n                      id=\"register-username\"\n                      type=\"text\"\n                      placeholder=\"Choose username\"\n                      value={registerData.username}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, username: e.target.value }))}\n                      className=\"bg-muted border-border focus:border-primary\"\n                      data-testid=\"input-register-username\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"register-password\" className=\"flex items-center gap-2 mb-2\">\n                      <Lock className=\"h-4 w-4\" />\n                      Password\n                    </Label>\n                    <Input\n                      id=\"register-password\"\n                      type=\"password\"\n                      placeholder=\"Choose password\"\n                      value={registerData.password}\n                      onChange={(e) => setRegisterData(prev => ({ ...prev, password: e.target.value }))}\n                      className=\"bg-muted border-border focus:border-primary\"\n                      data-testid=\"input-register-password\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label className=\"flex items-center gap-2 mb-2\">\n                      <ShieldQuestion className=\"h-4 w-4\" />\n                      Role\n                    </Label>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <MinecraftButton\n                        type=\"button\"\n                        variant={registerData.role === \"admin\" ? \"primary\" : \"secondary\"}\n                        onClick={() => setRegisterData(prev => ({ ...prev, role: \"admin\" }))}\n                        data-testid=\"button-register-role-admin\"\n                      >\n                        Admin\n                      </MinecraftButton>\n                      <MinecraftButton\n                        type=\"button\"\n                        variant={registerData.role === \"user\" ? \"primary\" : \"secondary\"}\n                        onClick={() => setRegisterData(prev => ({ ...prev, role: \"user\" }))}\n                        data-testid=\"button-register-role-user\"\n                      >\n                        User\n                      </MinecraftButton>\n                    </div>\n                  </div>\n\n                  <MinecraftButton\n                    type=\"submit\"\n                    variant=\"primary\"\n                    className=\"w-full\"\n                    disabled={registerMutation.isPending}\n                    data-testid=\"button-register-submit\"\n                  >\n                    {registerMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Registering...\n                      </>\n                    ) : (\n                      'Register'\n                    )}\n                  </MinecraftButton>\n                </form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11662},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/user-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Redirect } from \"wouter\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { Bot, Log, ServerStats } from \"@shared/schema\";\n\n// Components\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MinecraftButton } from \"@/components/ui/minecraft-button\";\nimport { StatusDot } from \"@/components/ui/status-dot\";\nimport { BotCard } from \"@/components/bot-card\";\nimport { LogViewer } from \"@/components/log-viewer\";\n\n// Icons\nimport { \n  Box, LogOut, LayoutDashboard, Bot as BotIcon, Terminal,\n  Info, CheckCircle, Clock, Server\n} from \"lucide-react\";\n\nexport default function UserDashboard() {\n  const { user, logoutMutation } = useAuth();\n  const isMobile = useIsMobile();\n  const [activeView, setActiveView] = useState(\"dashboard\");\n\n  // Redirect admin users to admin panel\n  if (user && user.role === \"admin\") {\n    return <Redirect to=\"/admin\" />;\n  }\n\n  // WebSocket connection\n  const { isConnected, onMessage } = useWebSocket();\n\n  // State for real-time data\n  const [bots, setBots] = useState<Bot[]>([]);\n  const [logs, setLogs] = useState<Log[]>([]);\n  const [serverStats, setServerStats] = useState<ServerStats>({\n    totalBots: 0,\n    onlineBots: 0,\n    offlineBots: 0,\n    avgHealth: 0,\n    avgUptime: 0,\n    serverPing: 0,\n  });\n\n  // Query for initial data\n  const { data: initialBots } = useQuery<Bot[]>({\n    queryKey: [\"/api/bots\"],\n    enabled: !!user,\n  });\n\n  const { data: initialLogs } = useQuery<Log[]>({\n    queryKey: [\"/api/logs\"],\n    enabled: !!user,\n  });\n\n  const { data: initialStats } = useQuery<ServerStats>({\n    queryKey: [\"/api/server-stats\"],\n    enabled: !!user,\n  });\n\n  // Initialize state from query data\n  useEffect(() => {\n    if (initialBots) setBots(initialBots);\n  }, [initialBots]);\n\n  useEffect(() => {\n    if (initialLogs) setLogs(initialLogs);\n  }, [initialLogs]);\n\n  useEffect(() => {\n    if (initialStats) setServerStats(initialStats);\n  }, [initialStats]);\n\n  // WebSocket event handlers\n  useEffect(() => {\n    onMessage('bots-update', (data: Bot[]) => {\n      setBots(data);\n    });\n\n    onMessage('log-added', (data: Log) => {\n      setLogs(prev => [data, ...prev].slice(0, 100));\n    });\n\n    onMessage('server-stats', (data: ServerStats) => {\n      setServerStats(data);\n    });\n  }, [onMessage]);\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  // Mobile navigation items\n  const mobileNavItems = [\n    { id: \"dashboard\", label: \"Home\", icon: LayoutDashboard },\n    { id: \"bots\", label: \"Bots\", icon: BotIcon },\n    { id: \"logs\", label: \"Logs\", icon: Terminal },\n  ];\n\n  if (!user) return null;\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Header */}\n      <header className=\"gradient-header sticky top-0 z-50 shadow-lg\" data-testid=\"user-header\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Box className=\"h-8 w-8 text-primary\" />\n            <div>\n              <h1 className=\"font-pixel text-lg text-primary\">Bot Manager</h1>\n              <p className=\"text-xs text-muted-foreground\">User Panel</p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            {/* Real-time Stats */}\n            <div className=\"hidden md:flex items-center space-x-6 text-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <StatusDot status=\"online\" />\n                <span data-testid=\"stat-online-bots\">{serverStats.onlineBots}</span>\n                <span className=\"text-muted-foreground\">Online</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Server className=\"h-4 w-4 text-primary\" />\n                <span className=\"text-primary font-medium\" data-testid=\"server-status\">\n                  {isConnected ? \"Connected\" : \"Disconnected\"}\n                </span>\n              </div>\n            </div>\n\n            {/* User Menu */}\n            <div className=\"flex items-center space-x-3 border-l border-border pl-4\">\n              <div className=\"text-right hidden md:block\">\n                <p className=\"text-sm font-medium\" data-testid=\"user-username\">{user.username}</p>\n                <p className=\"text-xs text-secondary\">User</p>\n              </div>\n              <MinecraftButton\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={handleLogout}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n              </MinecraftButton>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-6 pb-24 md:pb-6\">\n        {/* Info Banner */}\n        <Card className=\"glass-card border-accent mb-6\" data-testid=\"info-banner\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <Info className=\"h-5 w-5 text-accent mt-0.5\" />\n              <div>\n                <h3 className=\"font-bold mb-1\">View-Only Access</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  You have read-only access. Contact an administrator for full bot control.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* LayoutDashboard View */}\n        {activeView === \"dashboard\" && (\n          <div data-testid=\"user-dashboard-section\">\n            {/* Statistics Cards */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n              <Card className=\"glass-card border-primary\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <BotIcon className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold mb-1\" data-testid=\"stat-total-bots\">\n                    {serverStats.totalBots}\n                  </h3>\n                  <p className=\"text-xs text-muted-foreground\">Total Bots</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-card border-primary\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <CheckCircle className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold mb-1\" data-testid=\"stat-online-bots-card\">\n                    {serverStats.onlineBots}\n                  </h3>\n                  <p className=\"text-xs text-muted-foreground\">Online</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-card border-accent\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Clock className=\"h-6 w-6 text-accent\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold mb-1\" data-testid=\"stat-avg-uptime\">\n                    {serverStats.avgUptime}h\n                  </h3>\n                  <p className=\"text-xs text-muted-foreground\">Avg Uptime</p>\n                </CardContent>\n              </Card>\n\n              <Card className=\"glass-card border-secondary\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Server className=\"h-6 w-6 text-secondary\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold mb-1 text-primary\" data-testid=\"stat-server-ping\">\n                    {serverStats.serverPing}ms\n                  </h3>\n                  <p className=\"text-xs text-muted-foreground\">Latency</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Bot List */}\n            <div className=\"mb-6\">\n              <h3 className=\"font-pixel text-lg mb-4\">Bot Status</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {bots.length === 0 ? (\n                  <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n                    No bots available\n                  </div>\n                ) : (\n                  bots.map((bot) => (\n                    <BotCard\n                      key={bot.id}\n                      bot={bot}\n                      isAdmin={false}\n                    />\n                  ))\n                )}\n              </div>\n            </div>\n\n            {/* Recent Activity Log */}\n            <LogViewer logs={logs.slice(0, 20)} isAdmin={false} />\n          </div>\n        )}\n\n        {/* Bots View */}\n        {activeView === \"bots\" && (\n          <div data-testid=\"user-bots-section\">\n            <div className=\"mb-6\">\n              <h2 className=\"font-pixel text-xl mb-2\">Bot Status</h2>\n              <p className=\"text-muted-foreground\">View current bot information and status</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {bots.length === 0 ? (\n                <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n                  No bots available\n                </div>\n              ) : (\n                bots.map((bot) => (\n                  <BotCard\n                    key={bot.id}\n                    bot={bot}\n                    isAdmin={false}\n                  />\n                ))\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Logs View */}\n        {activeView === \"logs\" && (\n          <div data-testid=\"user-logs-section\">\n            <div className=\"mb-6\">\n              <h2 className=\"font-pixel text-xl mb-2\">Recent Activity</h2>\n              <p className=\"text-muted-foreground\">Monitor bot activities and system events</p>\n            </div>\n\n            <LogViewer logs={logs} isAdmin={false} />\n          </div>\n        )}\n      </main>\n\n      {/* Mobile Bottom Navigation */}\n      {isMobile && (\n        <nav className=\"fixed bottom-0 left-0 right-0 bg-card border-t border-border z-40\" data-testid=\"mobile-nav\">\n          <div className=\"grid grid-cols-3 gap-1 p-2\">\n            {mobileNavItems.map((item) => (\n              <button\n                key={item.id}\n                onClick={() => setActiveView(item.id)}\n                className={`flex flex-col items-center justify-center py-2 ${\n                  activeView === item.id ? \"text-primary\" : \"text-muted-foreground\"\n                }`}\n                data-testid={`mobile-nav-${item.id}`}\n              >\n                <item.icon className=\"h-5 w-5 mb-1\" />\n                <span className=\"text-xs font-pixel\">{item.label}</span>\n              </button>\n            ))}\n          </div>\n        </nav>\n      )}\n    </div>\n  );\n}\n","size_bytes":11125},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/minecraft-button.tsx":{"content":"import { forwardRef } from \"react\";\nimport { Button, ButtonProps } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MinecraftButtonProps extends Omit<ButtonProps, 'variant'> {\n  variant?: \"primary\" | \"secondary\" | \"destructive\" | \"accent\";\n}\n\nexport const MinecraftButton = forwardRef<HTMLButtonElement, MinecraftButtonProps>(\n  ({ className, variant = \"primary\", children, ...props }, ref) => {\n    const variants = {\n      primary: \"bg-primary text-primary-foreground border-primary hover:bg-primary/90\",\n      secondary: \"bg-secondary text-secondary-foreground border-secondary hover:bg-secondary/90\",\n      destructive: \"bg-destructive text-destructive-foreground border-destructive hover:bg-destructive/90\",\n      accent: \"bg-accent text-accent-foreground border-accent hover:bg-accent/90\",\n    };\n\n    return (\n      <Button\n        ref={ref}\n        className={cn(\n          \"minecraft-btn font-pixel text-xs uppercase\",\n          \"relative border-3 shadow-[4px_4px_0_rgba(0,0,0,0.5)]\",\n          \"hover:translate-x-[-2px] hover:translate-y-[-2px] hover:shadow-[6px_6px_0_rgba(0,0,0,0.5)]\",\n          \"active:translate-x-[2px] active:translate-y-[2px] active:shadow-[2px_2px_0_rgba(0,0,0,0.5)]\",\n          \"transition-all duration-100 ease-in-out\",\n          \"disabled:hover:translate-x-0 disabled:hover:translate-y-0 disabled:hover:shadow-[4px_4px_0_rgba(0,0,0,0.5)]\",\n          variants[variant],\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </Button>\n    );\n  }\n);\n\nMinecraftButton.displayName = \"MinecraftButton\";\n","size_bytes":1590},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/status-dot.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface StatusDotProps {\n  status: \"online\" | \"offline\" | \"connecting\";\n  className?: string;\n}\n\nexport function StatusDot({ status, className }: StatusDotProps) {\n  const statusClasses = {\n    online: \"bg-primary shadow-[0_0_12px_hsl(var(--primary))]\",\n    offline: \"bg-destructive shadow-[0_0_12px_hsl(var(--destructive))]\",\n    connecting: \"bg-accent shadow-[0_0_12px_hsl(var(--accent))]\",\n  };\n\n  return (\n    <span\n      className={cn(\n        \"inline-block w-3 h-3 rounded-full animate-pulse\",\n        statusClasses[status],\n        className\n      )}\n      data-testid={`status-dot-${status}`}\n    />\n  );\n}\n","size_bytes":652},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}